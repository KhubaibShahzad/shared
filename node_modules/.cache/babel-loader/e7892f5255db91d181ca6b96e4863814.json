{"ast":null,"code":"import _classCallCheck from \"/home/albatross/gitCode/shared/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/albatross/gitCode/shared/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/albatross/gitCode/shared/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/albatross/gitCode/shared/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/albatross/gitCode/shared/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/albatross/gitCode/shared/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _slicedToArray from \"/home/albatross/gitCode/shared/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/albatross/gitCode/shared/src/pages/client_info/client_contacts/ClientContactNew.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Icon } from 'antd';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { QL_CLIENT_CONTACT_ADD, QL_CLIENT_CONTACT_UPDATE, QL_CLIENT_CONTACT_GET } from '../../../constants/queries';\nimport { FormPagePose } from '../../../components/Animations';\nimport ContactInformationSubForm from './subforms/ContactInformationSubForm';\nimport QuestionAddContactSubForm from './subforms/QuestionAddContactSubForm';\nimport EndSubForm from './subforms/EndSubForm';\nvar fnMutationClientContactAdd = null;\nvar dataMutationClientContactAdd = null;\nvar prevPos = 0;\nvar fnMutationClientContactUpdate = null;\nvar dataMutationClientContactUpdate = null;\nfunction HiddenHook() {\n  var _useMutation = useMutation(QL_CLIENT_CONTACT_ADD);\n  var _useMutation2 = _slicedToArray(_useMutation, 2);\n  fnMutationClientContactAdd = _useMutation2[0];\n  dataMutationClientContactAdd = _useMutation2[1].dataMutationClientContactAdd;\n  var _useMutation3 = useMutation(QL_CLIENT_CONTACT_UPDATE);\n  var _useMutation4 = _slicedToArray(_useMutation3, 2);\n  fnMutationClientContactUpdate = _useMutation4[0];\n  dataMutationClientContactUpdate = _useMutation4[1].dataMutationClientContactUpdate;\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  });\n}\nfunction convertDB2FormData(data) {\n  var formData = [];\n  formData.push({\n    id: 'ContactInformationSubForm',\n    data: ContactInformationSubForm.FnCreateFormData({\n      firstName: data['clientContact']['firstName'],\n      lastName: data['clientContact']['lastName'],\n      company: data['clientContact']['company'],\n      addressLine1: data['clientContact']['address']['firstLine'],\n      addressLine2: data['clientContact']['address']['secondLine'],\n      cityDistrict: data['clientContact']['address']['city'],\n      stateProvince: data['clientContact']['address']['state'],\n      postalCode: data['clientContact']['address']['postalCode'],\n      country: data['clientContact']['address']['country'],\n      phone: data['clientContact']['primaryContactNumber'],\n      alternatePhone: data['clientContact']['secondaryContactNumber'],\n      relationship: data['clientContact']['relationship'],\n      profession: data['clientContact']['profession'],\n      partTeam: data['clientContact']['partOfMyProfessionalTeam'] ? 'Yes' : 'No',\n      email: data['clientContact']['email'],\n      notes: data['clientContact']['notes']\n    }),\n    visible: true\n  });\n  return formData;\n}\nfunction LoadDBDataHook(props) {\n  if (props.dbID != null && props.dbID != '') {\n    var _useQuery = useQuery(QL_CLIENT_CONTACT_GET, {\n        variables: {\n          id: props.dbID\n        }\n      }),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error;\n    if (data) {\n      console.log('call..', data);\n      props.cbLoadDBData(convertDB2FormData(data));\n    }\n  }\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  });\n}\nvar ClientContactNew = /*#__PURE__*/function (_Component) {\n  _inherits(ClientContactNew, _Component);\n  function ClientContactNew(props) {\n    var _this;\n    _classCallCheck(this, ClientContactNew);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ClientContactNew).call(this, props));\n    _this.toggleRightSide = function (e) {\n      e.preventDefault();\n      _this.setState({\n        isRightSideOpen: !_this.state.isRightSideOpen\n      });\n    };\n    var dbID = null;\n    var dbLoaded = true;\n    var clientContactID = _this.props.match.params.clientContactID;\n    if (clientContactID) {\n      dbID = clientContactID;\n      dbLoaded = false;\n    }\n    _this.state = {\n      dataID: dbID,\n      curSubFormID: 'QuestionAddContactSubForm',\n      curSubForm: QuestionAddContactSubForm,\n      formVisible: false,\n      subFormData: {},\n      formData: [\n        // {\n        //     id: 'assetsInformation',\n        //     data: {\n        //         title: '',\n        //         fields: [\n        //             {\n        //                 id: '' ,\n        //                 title: '',\n        //                 value: ''\n        //              }   \n        //         ]\n        //     }\n        // }\n      ],\n      isRightSideOpen: true,\n      formSteps: [{\n        id: 'ContactInformationSubForm',\n        icon: 'icon_ex.png',\n        title: 'Step1'\n      }],\n      dbLoaded: dbLoaded,\n      dbID: dbID\n    };\n    _this.goSubForm = _this.goSubForm.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.updateSubForm = _this.updateSubForm.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getSubFormData = _this.getSubFormData.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getSubFormField = _this.getSubFormField.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.createQLVariable = _this.createQLVariable.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getSubFormFieldValue = _this.getSubFormFieldValue.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.toggleRightSide = _this.toggleRightSide.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.loadDBData = _this.loadDBData.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n  _createClass(ClientContactNew, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.goSubForm(\"QuestionAddContactSubForm\");\n      // this.goSubForm(\"UserDefinedSubForm\");\n    }\n  }, {\n    key: \"getSubFormField\",\n    value: function getSubFormField(formID, fieldID) {\n      var formData = this.state.formData;\n      for (var index = 0; index < formData.length; index++) {\n        if (formData[index]['id'] == formID) {\n          var data = formData[index]['data'];\n          var fields = data['fields'];\n          for (var findex = 0; findex < fields.length; findex++) {\n            if (fields[findex]['id'] == fieldID) {\n              return fields[findex];\n            }\n          }\n        }\n      }\n      return null;\n    }\n  }, {\n    key: \"getSubFormFieldValue\",\n    value: function getSubFormFieldValue(formID, fieldID) {\n      var field = this.getSubFormField(formID, fieldID);\n      if (field == null) {\n        return '';\n      } else {\n        return field.value;\n      }\n    }\n  }, {\n    key: \"createQLVariable\",\n    value: function createQLVariable(subFormID, subFormData) {\n      var varQL = null;\n      switch (subFormID) {\n        case 'ContactInformationSubForm':\n          varQL = {\n            \"clientId\": '1',\n            \"clientContact\": {\n              \"firstName\": this.getSubFormFieldValue(subFormID, 'firstName'),\n              \"lastName\": this.getSubFormFieldValue(subFormID, 'lastName'),\n              \"company\": this.getSubFormFieldValue(subFormID, 'company'),\n              \"primaryContactNumber\": this.getSubFormFieldValue(subFormID, 'phone'),\n              \"secondaryContactNumber\": this.getSubFormFieldValue(subFormID, 'alternatePhone'),\n              \"relationship\": this.getSubFormFieldValue(subFormID, 'relationship'),\n              \"profession\": this.getSubFormFieldValue(subFormID, 'profession'),\n              \"partOfMyProfessionalTeam\": this.getSubFormFieldValue(subFormID, 'partTeam') == 'Yes' ? true : false,\n              \"email\": this.getSubFormFieldValue(subFormID, 'email'),\n              \"notes\": this.getSubFormFieldValue(subFormID, 'notes')\n            },\n            \"address\": {\n              \"firstLine\": this.getSubFormFieldValue(subFormID, 'addressLine1'),\n              \"secondLine\": this.getSubFormFieldValue(subFormID, 'addressLine2'),\n              \"city\": this.getSubFormFieldValue(subFormID, 'cityDistrict'),\n              \"state\": this.getSubFormFieldValue(subFormID, 'stateProvince'),\n              \"country\": this.getSubFormFieldValue(subFormID, 'country'),\n              \"postalCode\": this.getSubFormFieldValue(subFormID, 'postalCode')\n            }\n          };\n          break;\n        case 'EndSubForm':\n      }\n      return varQL;\n    }\n  }, {\n    key: \"updateSubForm\",\n    value: function updateSubForm(subFormID, subFormData) {\n      var visible = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var formData = this.state.formData;\n      var bFound = false;\n      for (var findex = 0; findex < formData.length; findex++) {\n        if (formData[findex]['id'] == subFormID) {\n          formData[findex]['data'] = subFormData;\n          bFound = true;\n        }\n      }\n      if (!bFound) {\n        formData.push({\n          id: subFormID,\n          data: subFormData,\n          visible: visible\n        });\n      }\n      var varQL = this.createQLVariable(subFormID, subFormData);\n      console.log('varQL:', varQL, ', dataID:', this.state.dataID);\n      var instance = this;\n      if (varQL != null) {\n        if (this.state.dataID == null) {\n          fnMutationClientContactAdd({\n            variables: {\n              data: varQL\n            }\n          }).then(function (response) {\n            instance.setState({\n              dataID: response['data']['createClientContact']['id']\n            });\n          });\n        } else {\n          fnMutationClientContactUpdate({\n            variables: {\n              id: this.state.dataID,\n              data: varQL\n            }\n          });\n        }\n      }\n      this.setState({\n        formData: formData\n      });\n    }\n  }, {\n    key: \"getSubFormData\",\n    value: function getSubFormData(subFormID) {\n      var fromState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var pformData = arguments.length > 2 ? arguments[2] : undefined;\n      var formData;\n      if (fromState) {\n        formData = this.state.formData;\n      } else {\n        formData = pformData;\n      }\n      for (var findex = 0; findex < formData.length; findex++) {\n        if (formData[findex]['id'] == subFormID) {\n          return formData[findex]['data'];\n        }\n      }\n      return {};\n    }\n  }, {\n    key: \"goSubForm\",\n    value: function goSubForm(subFormID) {\n      var _this2 = this;\n      this.setState({\n        formVisible: false\n      });\n      var nextSubForm = ContactInformationSubForm;\n      var subFormData = this.getSubFormData(subFormID);\n      switch (subFormID) {\n        case 'ContactInformationSubForm':\n          nextSubForm = ContactInformationSubForm;\n          break;\n        case 'QuestionAddContactSubForm':\n          nextSubForm = QuestionAddContactSubForm;\n          break;\n        case 'EndSubForm':\n          nextSubForm = EndSubForm;\n          break;\n      }\n      setTimeout(function () {\n        _this2.setState({\n          formVisible: true,\n          curSubFormID: subFormID,\n          curSubForm: nextSubForm,\n          subFormData: subFormData\n        });\n      }, 100);\n    }\n  }, {\n    key: \"loadDBData\",\n    value: function loadDBData(formData) {\n      console.log('formData:', formData);\n      var instance = this;\n      setTimeout(function () {\n        instance.setState({\n          formVisible: true,\n          dbLoaded: true,\n          formData: formData,\n          subFormData: instance.getSubFormData(instance.state.curSubFormID, false, formData)\n        });\n      }, 100);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n      var navlinks = [{\n        href: '/',\n        title: 'Home'\n      }, {\n        href: '/modules',\n        title: 'Modules'\n      }, {\n        href: '/client_contacts',\n        title: 'Client Contacts'\n      }];\n      var SubForm = this.state.curSubForm;\n      var formpageClassName = 'form-page-container-wrap';\n      if (this.state.isRightSideOpen) {\n        formpageClassName = 'form-page-container-wrap right-side--opend';\n      } else {\n        formpageClassName = 'form-page-container-wrap right-side--collapsed';\n      }\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: formpageClassName,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-page--main-side\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(HiddenHook, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 21\n        }\n      }), !this.state.dbLoaded && /*#__PURE__*/React.createElement(LoadDBDataHook, {\n        dbLoaded: this.state.dbLoaded,\n        dbID: this.state.dbID,\n        cbLoadDBData: this.loadDBData,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"page-nav-history\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"steps\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"process\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"process-row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 29\n        }\n      }, this.state.formSteps.map(function (formStep, index) {\n        var elementPos = _this3.state.formSteps.map(function (x) {\n          return x.id;\n        }).indexOf(_this3.state.curSubFormID);\n        if (elementPos === -1) {\n          elementPos = prevPos;\n        } else {\n          prevPos = elementPos;\n        }\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"process-step\",\n          key: index,\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 393,\n            columnNumber: 53\n          }\n        }, /*#__PURE__*/React.createElement(\"button\", {\n          type: \"button\"\n          // className={\n          //     elementPos >= index\n          //     ? 'btn nav-items btn-circle active'\n          //     : 'btn nav-items btn-circle'\n          // }\n          ,\n          className: \"btn nav-items btn-circle active\",\n          \"data-toggle\": \"tab\",\n          onClick: function onClick() {\n            return _this3.goSubForm(formStep.id);\n          },\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 394,\n            columnNumber: 53\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            fontSize: 30,\n            color: '#006400'\n          },\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 406,\n            columnNumber: 53\n          }\n        }, index + 1)), /*#__PURE__*/React.createElement(\"p\", {\n          className: \"step-title\",\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 410,\n            columnNumber: 53\n          }\n        }, formStep.title));\n        // return (\n        //     <div key={index} className=\"form-step-wrap\" onClick={() => this.goSubForm(formStep.id)}>\n        //         <img className=\"\" src={require('../../../assets/images/page_icons/' + formStep.icon)}></img>\n        //         <div className=\"\">{formStep.title}</div>\n        //     </div>            \n        // )\n      })))), !this.state.dbLoaded && /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 49\n        }\n      }, \"Loading...\"), this.state.dbLoaded && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-page-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 445,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-page--left-side\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(FormPagePose, {\n        className: \"info-form-block\",\n        pose: this.state.formVisible ? 'visible' : 'hidden',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 447,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(SubForm, {\n        subFormData: this.state.subFormData,\n        cbGoSubForm: this.goSubForm,\n        cbUpdateSubForm: this.updateSubForm,\n        formData: this.state.formData,\n        cbGetSubFormField: this.getSubFormField,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 448,\n          columnNumber: 37\n        }\n      }))))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-page--right-side\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 460,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"right-side-collapse-icon\",\n        onClick: this.toggleRightSide,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 461,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: \"fe-menu\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 25\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-page--right-side-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 21\n        }\n      }, this.state.formData.map(function (subForm, sindex) {\n        if (subForm.visible == false) {\n          return /*#__PURE__*/React.createElement(\"div\", {\n            key: sindex,\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 468,\n              columnNumber: 45\n            }\n          });\n        }\n        var subFormData = subForm.data;\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"form-brief-block\",\n          key: sindex,\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 473,\n            columnNumber: 33\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"form-brief-top\",\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 474,\n            columnNumber: 37\n          }\n        }, /*#__PURE__*/React.createElement(\"h4\", {\n          className: \"form-brief-title\",\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 475,\n            columnNumber: 41\n          }\n        }, subFormData.title), /*#__PURE__*/React.createElement(\"span\", {\n          className: \"form-brief-edit-btn\",\n          onClick: function onClick() {\n            return _this3.goSubForm(subForm.id);\n          },\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 476,\n            columnNumber: 41\n          }\n        }, /*#__PURE__*/React.createElement(Icon, {\n          type: \"edit\",\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 476,\n            columnNumber: 122\n          }\n        }))), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"form-brief-content\",\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 478,\n            columnNumber: 37\n          }\n        }, subFormData.fields.map(function (field, ffindex) {\n          return /*#__PURE__*/React.createElement(\"div\", {\n            className: \"form-brief-item\",\n            key: ffindex,\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 482,\n              columnNumber: 49\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            className: \"form-brief-item-title\",\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 483,\n              columnNumber: 53\n            }\n          }, field.title != '' ? field.title + \":\" : null, \" \"), /*#__PURE__*/React.createElement(\"p\", {\n            className: \"form-brief-item-value\",\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 484,\n              columnNumber: 53\n            }\n          }, field.value));\n        })));\n      }))));\n    }\n  }]);\n  return ClientContactNew;\n}(Component);\nexport default connect()(ClientContactNew);","map":{"version":3,"names":["React","Component","connect","Link","Icon","useMutation","useQuery","QL_CLIENT_CONTACT_ADD","QL_CLIENT_CONTACT_UPDATE","QL_CLIENT_CONTACT_GET","FormPagePose","ContactInformationSubForm","QuestionAddContactSubForm","EndSubForm","fnMutationClientContactAdd","dataMutationClientContactAdd","prevPos","fnMutationClientContactUpdate","dataMutationClientContactUpdate","HiddenHook","convertDB2FormData","data","formData","push","id","FnCreateFormData","firstName","lastName","company","addressLine1","addressLine2","cityDistrict","stateProvince","postalCode","country","phone","alternatePhone","relationship","profession","partTeam","email","notes","visible","LoadDBDataHook","props","dbID","variables","loading","error","console","log","cbLoadDBData","ClientContactNew","toggleRightSide","e","preventDefault","setState","isRightSideOpen","state","dbLoaded","clientContactID","match","params","dataID","curSubFormID","curSubForm","formVisible","subFormData","formSteps","icon","title","goSubForm","bind","updateSubForm","getSubFormData","getSubFormField","createQLVariable","getSubFormFieldValue","loadDBData","formID","fieldID","index","length","fields","findex","field","value","subFormID","varQL","bFound","instance","then","response","fromState","pformData","nextSubForm","setTimeout","navlinks","href","SubForm","formpageClassName","map","formStep","elementPos","x","indexOf","fontSize","color","subForm","sindex","ffindex"],"sources":["/home/albatross/gitCode/shared/src/pages/client_info/client_contacts/ClientContactNew.js"],"sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Icon } from 'antd';\n\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport {\n    QL_CLIENT_CONTACT_ADD,\n    QL_CLIENT_CONTACT_UPDATE,\n    QL_CLIENT_CONTACT_GET\n} from '../../../constants/queries';\n\nimport { FormPagePose } from '../../../components/Animations';\nimport ContactInformationSubForm from './subforms/ContactInformationSubForm';\nimport QuestionAddContactSubForm from './subforms/QuestionAddContactSubForm';\nimport EndSubForm from './subforms/EndSubForm';\n\nvar fnMutationClientContactAdd = null;\nvar dataMutationClientContactAdd = null;\nlet prevPos = 0;\nvar fnMutationClientContactUpdate = null;\nvar dataMutationClientContactUpdate = null;\n\nfunction HiddenHook(){\n    [fnMutationClientContactAdd, { dataMutationClientContactAdd }] = useMutation(QL_CLIENT_CONTACT_ADD);\n    [fnMutationClientContactUpdate, { dataMutationClientContactUpdate }] = useMutation(QL_CLIENT_CONTACT_UPDATE);\n\n    return (\n        <React.Fragment></React.Fragment>\n    )\n}\n\nfunction convertDB2FormData(data){\n\n    let formData = [];\n\n    formData.push({\n        id: 'ContactInformationSubForm',\n        data: ContactInformationSubForm.FnCreateFormData({\n            firstName: data['clientContact']['firstName'],\n            lastName: data['clientContact']['lastName'],\n            company: data['clientContact']['company'],\n            addressLine1: data['clientContact']['address']['firstLine'],\n            addressLine2: data['clientContact']['address']['secondLine'],\n            cityDistrict: data['clientContact']['address']['city'],\n            stateProvince: data['clientContact']['address']['state'],\n            postalCode: data['clientContact']['address']['postalCode'],\n            country: data['clientContact']['address']['country'],\n            phone: data['clientContact']['primaryContactNumber'],\n            alternatePhone: data['clientContact']['secondaryContactNumber'],\n            relationship: data['clientContact']['relationship'],\n            profession: data['clientContact']['profession'],\n            partTeam: data['clientContact']['partOfMyProfessionalTeam'] ? 'Yes' : 'No',\n            email: data['clientContact']['email'],\n            notes: data['clientContact']['notes'],\n        }),\n        visible: true\n    })\n\n    return formData;\n}\n\nfunction LoadDBDataHook(props){\n    if(props.dbID != null && props.dbID != ''){\n        const {data, loading, error} = useQuery(QL_CLIENT_CONTACT_GET, { variables: { id: props.dbID} });\n        if(data){\n            console.log('call..', data);\n            props.cbLoadDBData(convertDB2FormData(data));\n        }\n    }\n    \n    return (\n        <React.Fragment></React.Fragment>\n    )\n}\n\n\nclass ClientContactNew extends Component {\n\n    constructor(props) {\n        super(props);\n\n        let dbID = null;\n        let dbLoaded = true;\n\n        const { clientContactID } = this.props.match.params;        \n\n        if( clientContactID ){\n            dbID = clientContactID;\n            dbLoaded = false;\n        }      \n\n        this.state = {\n            dataID: dbID,\n            curSubFormID: 'QuestionAddContactSubForm',\n            curSubForm: QuestionAddContactSubForm,\n            formVisible: false,\n            subFormData: {},\n            formData: [\n                // {\n                //     id: 'assetsInformation',\n                //     data: {\n                //         title: '',\n                //         fields: [\n                //             {\n                //                 id: '' ,\n                //                 title: '',\n                //                 value: ''\n                //              }   \n                //         ]\n                //     }\n                // }\n            ],\n            isRightSideOpen: true,\n            formSteps: [\n                {\n                    id: 'ContactInformationSubForm',\n                    icon: 'icon_ex.png',\n                    title: 'Step1'\n                }\n            ],\n            dbLoaded: dbLoaded,\n            dbID: dbID\n        }\n\n        this.goSubForm = this.goSubForm.bind(this);\n        this.updateSubForm = this.updateSubForm.bind(this);\n        this.getSubFormData = this.getSubFormData.bind(this);\n        this.getSubFormField = this.getSubFormField.bind(this);\n\n        this.createQLVariable = this.createQLVariable.bind(this);\n        this.getSubFormFieldValue = this.getSubFormFieldValue.bind(this);\n\n        this.toggleRightSide = this.toggleRightSide.bind(this);\n\n        this.loadDBData = this.loadDBData.bind(this);\n    }\n\n    componentDidMount() {\n        this.goSubForm(\"QuestionAddContactSubForm\");\n        // this.goSubForm(\"UserDefinedSubForm\");\n    }\n\n    getSubFormField(formID, fieldID){\n        let formData = this.state.formData;\n\n        for(var index = 0; index < formData.length; index++){\n            if(formData[index]['id'] == formID){\n                let data = formData[index]['data'];\n                let fields = data['fields'];\n                for(var findex = 0; findex < fields.length; findex++){\n                    if(fields[findex]['id'] == fieldID){\n                        return fields[findex];\n                    }\n                }\n            }\n        }\n\n        return null\n    }\n\n    getSubFormFieldValue(formID, fieldID){\n        let field = this.getSubFormField(formID, fieldID);\n\n        if(field == null){\n            return '';\n        }\n        else{\n            return field.value;\n        }\n    }\n\n    createQLVariable(subFormID, subFormData){\n        let varQL = null;\n\n        switch(subFormID){\n            case 'ContactInformationSubForm': \n                varQL = {\n                    \"clientId\" : '1',\n                    \"clientContact\": {\n                        \"firstName\": this.getSubFormFieldValue(subFormID, 'firstName'),\n                        \"lastName\": this.getSubFormFieldValue(subFormID, 'lastName'),\n                        \"company\": this.getSubFormFieldValue(subFormID, 'company'),\n                        \"primaryContactNumber\": this.getSubFormFieldValue(subFormID, 'phone'),\n                        \"secondaryContactNumber\": this.getSubFormFieldValue(subFormID, 'alternatePhone'),\n                        \"relationship\": this.getSubFormFieldValue(subFormID, 'relationship'),\n                        \"profession\": this.getSubFormFieldValue(subFormID, 'profession'),\n                        \"partOfMyProfessionalTeam\": this.getSubFormFieldValue(subFormID, 'partTeam') == 'Yes' ? true : false,\n                        \"email\": this.getSubFormFieldValue(subFormID, 'email'),\n                        \"notes\": this.getSubFormFieldValue(subFormID, 'notes'),\n                    },\n                    \"address\": {\n                        \"firstLine\": this.getSubFormFieldValue(subFormID, 'addressLine1'),\n                        \"secondLine\": this.getSubFormFieldValue(subFormID, 'addressLine2'),\n                        \"city\": this.getSubFormFieldValue(subFormID, 'cityDistrict'),\n                        \"state\": this.getSubFormFieldValue(subFormID, 'stateProvince'),\n                        \"country\": this.getSubFormFieldValue(subFormID, 'country'),\n                        \"postalCode\": this.getSubFormFieldValue(subFormID, 'postalCode'),\n                    }\n                };\n                break;\n            case 'EndSubForm':\n                \n        }\n\n        return varQL;\n    }\n    updateSubForm(subFormID, subFormData, visible = true){\n        let formData = this.state.formData;\n\n        var bFound = false;\n        for(var findex = 0; findex < formData.length; findex++){\n            if(formData[findex]['id'] == subFormID){\n                formData[findex]['data'] = subFormData;\n                bFound = true;\n            }\n        }\n\n        if(!bFound){\n            formData.push({\n                id: subFormID,\n                data: subFormData,\n                visible: visible\n            })\n        }\n\n\n        let varQL = this.createQLVariable(subFormID, subFormData);\n\n        console.log('varQL:', varQL, ', dataID:', this.state.dataID);\n        \n        var instance = this;\n        if(varQL != null){\n            if(this.state.dataID == null){\n                fnMutationClientContactAdd({ variables: { data: varQL } }).then((response) => {\n                    instance.setState({\n                        dataID: response['data']['createClientContact']['id']\n                    })\n                });\n                \n            }\n            else{\n                fnMutationClientContactUpdate({ variables: { id: this.state.dataID, data: varQL } })\n            }\n        }\n\n        this.setState({\n            formData: formData\n        });\n    }\n\n    getSubFormData(subFormID, fromState = true, pformData){\n        let formData;\n        if(fromState){\n            formData = this.state.formData;\n        }\n        else{\n            formData = pformData;\n        }\n\n        for(var findex = 0; findex < formData.length; findex++){\n            if(formData[findex]['id'] == subFormID){\n                return formData[findex]['data'];\n            }\n        }\n\n        return {};\n    }\n\n    goSubForm(subFormID){\n\n        this.setState({\n            formVisible: false,\n        })\n\n        let nextSubForm = ContactInformationSubForm;\n        let subFormData = this.getSubFormData(subFormID);\n\n        switch(subFormID){\n            case 'ContactInformationSubForm': \n                nextSubForm = ContactInformationSubForm;\n                break;\n            case 'QuestionAddContactSubForm': \n                nextSubForm = QuestionAddContactSubForm;\n                break;\n            case 'EndSubForm':\n                nextSubForm = EndSubForm;\n                break;\n        }\n\n        setTimeout(() => {\n            this.setState({ \n                formVisible: true,\n                curSubFormID: subFormID,\n                curSubForm: nextSubForm,\n                subFormData: subFormData\n            });\n        }, 100);\n\n    }\n\n    toggleRightSide = (e) => {\n        e.preventDefault();\n        this.setState({ isRightSideOpen: !this.state.isRightSideOpen });\n    }\n\n    loadDBData(formData){\n        console.log('formData:', formData);\n\n        var instance = this;\n        setTimeout(function(){\n            instance.setState({ \n                formVisible: true,\n                dbLoaded: true,\n                formData: formData,\n                subFormData: instance.getSubFormData(instance.state.curSubFormID, false, formData)\n            });\n        }, 100)        \n\n    }\n\n    render() {\n\n        const navlinks = [\n            {\n                href: '/',\n                title: 'Home'\n            },\n            {\n                href: '/modules',\n                title: 'Modules'\n            },\n            {\n                href: '/client_contacts',\n                title: 'Client Contacts'\n            }\n        ]\n\n        let SubForm = this.state.curSubForm;\n\n        let formpageClassName = 'form-page-container-wrap';\n        if(this.state.isRightSideOpen){\n            formpageClassName = 'form-page-container-wrap right-side--opend';\n        }\n        else {\n            formpageClassName = 'form-page-container-wrap right-side--collapsed';\n        }\n        return (\n            <div className={formpageClassName}>\n                <div className=\"form-page--main-side\">\n                    <HiddenHook />\n                    {\n                        !this.state.dbLoaded && \n                        <LoadDBDataHook \n                            dbLoaded={this.state.dbLoaded}\n                            dbID={this.state.dbID}\n                            cbLoadDBData={this.loadDBData}\n                        />\n                    }\n                    <div className=\"page-nav-history\">\n                        {/* { \n                            navlinks.map((navlink, index) => {\n                                return (\n                                    <span key={index}>\n                                        <Link key={index} to={navlink.href} className=\"page-nav-link\">\n                                            {navlink.title}\n                                        </Link>\n                                        {index != (navlinks.length - 1) ? \"/\" : null}\n                                    </span>\n                                    \n                                )                            \n                            }) \n                        } */}\n                    </div>\n                    <div className='steps'>\n                        <div className='process'>\n                            <div className='process-row'>\n                                    {/* <div className=\"form-step-container\"> */}\n                                        {\n                                            this.state.formSteps.map((formStep, index) => {\n                                                let elementPos = this.state.formSteps\n                                                .map(function (x) {\n                                                return x.id;\n                                                })\n                                                .indexOf(this.state.curSubFormID);\n                            \n                                                if (elementPos === -1) {\n                                                    elementPos = prevPos;\n                                                } else {\n                                                    prevPos = elementPos;\n                                                }\n                                                return(\n                                                    <div className='process-step' key={index}>\n                                                    <button\n                                                    type='button'\n                                                    // className={\n                                                    //     elementPos >= index\n                                                    //     ? 'btn nav-items btn-circle active'\n                                                    //     : 'btn nav-items btn-circle'\n                                                    // }\n                                                    className='btn nav-items btn-circle active'\n                                                    data-toggle='tab'\n                                                    onClick={() => this.goSubForm(formStep.id)}\n                                                    >\n                                                    {/* <img className=\"img-icon\" src={ImageIcon} /> */}\n                                                    <div style={{ fontSize: 30, color: '#006400' }}>\n                                                        {index + 1}\n                                                    </div>\n                                                    </button>\n                                                    <p className='step-title'>{formStep.title}</p>\n                                                </div>\n                                                )\n                                                // return (\n                                                //     <div key={index} className=\"form-step-wrap\" onClick={() => this.goSubForm(formStep.id)}>\n                                                //         <img className=\"\" src={require('../../../assets/images/page_icons/' + formStep.icon)}></img>\n                                                //         <div className=\"\">{formStep.title}</div>\n                                                //     </div>            \n                                                // )\n                                            })\n                                        }\n                                    {/* </div> */}\n\n                            </div>\n                        </div>\n                    </div>\n\n\n                    {/* <div className=\"form-step-container\">\n                        {\n                            this.state.formSteps.map((formStep, index) => {\n                                return (\n                                    <div key={index} className=\"form-step-wrap\" onClick={() => this.goSubForm(formStep.id)}>\n                                        <img className=\"\" src={require('../../../assets/images/page_icons/' + formStep.icon)}></img>\n                                        <div className=\"\">{formStep.title}</div>\n                                    </div>            \n                                )\n                            })\n                        }\n                    </div> */}\n                    {\n                        !this.state.dbLoaded && <div>Loading...</div>\n                    }\n                    {\n                        this.state.dbLoaded && \n                        <div className=\"form-page-container\">\n                            <div className=\"form-page--left-side\">\n                                <FormPagePose className=\"info-form-block\" pose={ this.state.formVisible ? 'visible' : 'hidden'}>\n                                    <SubForm \n                                        subFormData={this.state.subFormData}\n                                        cbGoSubForm={this.goSubForm}\n                                        cbUpdateSubForm={this.updateSubForm}\n                                        formData={this.state.formData}\n                                        cbGetSubFormField={this.getSubFormField}\n                                    />\n                                </FormPagePose>\n                            </div>\n                        </div>\n                    }\n                </div>\n                <div className=\"form-page--right-side\">\n                    <span className=\"right-side-collapse-icon\" onClick={this.toggleRightSide}>\n                        <i className=\"fe-menu\"></i>\n                    </span>\n                    <div className=\"form-page--right-side-wrap\">\n                        {\n                            this.state.formData.map((subForm, sindex) => {\n                                if(subForm.visible == false){\n                                    return (<div key={sindex}></div>)\n                                }\n                                \n                                let subFormData = subForm.data;\n                                return(\n                                <div className=\"form-brief-block\" key={sindex}>\n                                    <div className=\"form-brief-top\">\n                                        <h4 className=\"form-brief-title\">{subFormData.title}</h4>\n                                        <span className=\"form-brief-edit-btn\" onClick={() => this.goSubForm(subForm.id)}><Icon type=\"edit\"></Icon></span>\n                                    </div>\n                                    <div className=\"form-brief-content\">\n                                    {\n                                        subFormData.fields.map((field, ffindex) => {\n                                            return(\n                                                <div className=\"form-brief-item\" key={ffindex}>\n                                                    <p className=\"form-brief-item-title\">{field.title != '' ? field.title + \":\" : null} </p>\n                                                    <p className=\"form-brief-item-value\">{field.value}</p>\n                                                </div>\n                                            )\n                                        })\n                                    }\n                                    </div>\n                                </div>\n                                )\n                            })\n                        }\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default connect()(ClientContactNew);"],"mappings":"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"},"metadata":{},"sourceType":"module"}