{"ast":null,"code":"import _classCallCheck from \"/home/albatross/gitCode/shared/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/albatross/gitCode/shared/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/albatross/gitCode/shared/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/albatross/gitCode/shared/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/albatross/gitCode/shared/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/albatross/gitCode/shared/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _slicedToArray from \"/home/albatross/gitCode/shared/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/albatross/gitCode/shared/src/pages/modules/budget/Plaid.js\";\nimport React, { Component } from \"react\";\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Modal, Button } from 'antd';\nimport ROLES from 'constants/roles';\nimport PlaidLink from \"react-plaid-link\";\nimport axios from \"axios\";\nimport Report from 'components/Report';\nimport Config from 'Config';\nimport { plaidLogin } from 'redux/actions';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { QL_PLAID_ACCOUNT_ADD, QL_PLAID_INCOME_ADD, QL_PLAID_INVESTMENT_ADD, QL_PLAID_ITEM_ADD } from '../../../constants/queries';\nvar fnMutationPlaidAccountAdd = null;\nvar fnMutationPlaidIncomeAdd = null;\nvar fnMutationPlaidInvestmentAdd = null;\nvar fnMutationPlaidItemAdd = null;\nfunction HiddenHook() {\n  var _useMutation = useMutation(QL_PLAID_ACCOUNT_ADD);\n  var _useMutation2 = _slicedToArray(_useMutation, 1);\n  fnMutationPlaidAccountAdd = _useMutation2[0];\n  var _useMutation3 = useMutation(QL_PLAID_INCOME_ADD);\n  var _useMutation4 = _slicedToArray(_useMutation3, 1);\n  fnMutationPlaidIncomeAdd = _useMutation4[0];\n  var _useMutation5 = useMutation(QL_PLAID_INVESTMENT_ADD);\n  var _useMutation6 = _slicedToArray(_useMutation5, 1);\n  fnMutationPlaidInvestmentAdd = _useMutation6[0];\n  var _useMutation7 = useMutation(QL_PLAID_ITEM_ADD);\n  var _useMutation8 = _slicedToArray(_useMutation7, 1);\n  fnMutationPlaidItemAdd = _useMutation8[0];\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  });\n}\nvar PLAID = {\n  IMPORT_TRANSACTION: 'PLAID_IMPORT_TRANSACTION',\n  IMPORT_ACCOUNT: 'PLAID_IMPORT_ACCOUNT',\n  IMPORT_INCOME: 'PLAID_IMPORT_INCOME',\n  IMPORT_INVESTMENT: 'PLAID_IMPORT_INVESTMENT',\n  IMPORT_ITEM: 'PLAID_IMPORT_ITEM',\n  IMPORT_BALANCE: 'PLAID_IMPORT_BALANCE'\n};\nvar Plaid = /*#__PURE__*/function (_Component) {\n  _inherits(Plaid, _Component);\n  function Plaid() {\n    var _this;\n    _classCallCheck(this, Plaid);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Plaid).call(this));\n    _this.state = {\n      reports: {\n        reportData: [],\n        reportCols: {},\n        reportTitle: ''\n      },\n      dataLoaded: false\n    };\n    _this.handleOnSuccess = _this.handleOnSuccess.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleOnExit = _this.handleOnExit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getTransactions = _this.getTransactions.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getIncome = _this.getIncome.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getBalance = _this.getBalance.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getAssets = _this.getAssets.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getInvestments = _this.getInvestments.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getLiabilities = _this.getLiabilities.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.fnImportPlaid = _this.fnImportPlaid.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.fnImportAccounts = _this.fnImportAccounts.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n  _createClass(Plaid, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"fnImportAccounts\",\n    value: function fnImportAccounts() {\n      var _this2 = this;\n      axios.get(Config.backend_server + \"/plaid/accounts\").then(function (res) {\n        var accounts = res.data['accounts'];\n        console.log('accounts:', accounts);\n        var varQL = null;\n        for (var index = 0; index < accounts.length; index++) {\n          varQL = {\n            accountId: '' + _this2.props.user.id,\n            plaidAccount: {\n              uuid: accounts[index]['account_id'],\n              balances: {\n                available: accounts[index]['balances']['available'],\n                current: accounts[index]['balances']['current'],\n                iso_currency_code: accounts[index]['balances']['iso_currency_code'],\n                limit: accounts[index]['balances']['limit'],\n                unofficial_currency_code: accounts[index]['balances']['unofficial_currency_code']\n              },\n              mask: accounts[index]['mask'],\n              name: accounts[index]['name'],\n              officialName: accounts[index]['offical_name'],\n              subtype: accounts[index]['subtype'],\n              plaidAccountType: accounts[index]['type']\n            }\n          };\n          console.log('varQL:', varQL);\n          fnMutationPlaidAccountAdd({\n            variables: {\n              data: varQL\n            }\n          }).then(function (response) {});\n        }\n      });\n    }\n  }, {\n    key: \"fnImportPlaid\",\n    value: function fnImportPlaid(plaidImportType, data) {\n      console.log(plaidImportType, data);\n      var varQL = null;\n      switch (plaidImportType) {\n        case PLAID.IMPORT_TRANSACTION:\n          break;\n        case PLAID.IMPORT_ACCOUNT:\n          // varQL = {\n\n          // }\n          // fnMutationPlaidAccountAdd(this.props.user.id, { variables: { data: varQL } }).then((response) => {\n          // });\n          break;\n        case PLAID.IMPORT_INCOME:\n          varQL = {\n            accountId: '' + this.props.user.id,\n            plaidIncome: {\n              // incomeStreams: \n              lastYearIncome: data.raw.last_year_income,\n              lastYearIncomeBeforeTax: data.raw.last_year_income_before_tax,\n              maxNumberOfOverlappingIncomeStreams: data.raw.max_number_of_overlapping_income_streams,\n              numberOfIncomeStreams: data.raw.number_of_income_streams,\n              projectedYearlyIncome: data.raw.projected_yearly_income,\n              projectedYearlyIncomeBeforeTax: data.raw.projected_yearly_income_before_tax\n            }\n          };\n          console.log('varQL:', varQL);\n          fnMutationPlaidIncomeAdd({\n            variables: {\n              data: varQL\n            }\n          }).then(function (response) {});\n          break;\n        case PLAID.IMPORT_INVESTMENT:\n          varQL = {\n            accountId: '' + this.props.user.id,\n            plaidInvestment: {\n              uuid: data.raw.account_id,\n              amount: data.raw.amount,\n              cancelTransactionId: data.raw.cancel_transaction_id,\n              date: data.raw.date,\n              fees: data.raw.fees,\n              investmentTransactionId: data.raw.investment_transaction_id,\n              isoCurrencyCode: data.raw.iso_currency_code,\n              name: data.raw.name,\n              price: data.raw.price,\n              quantity: data.raw.quantity,\n              securityId: data.raw.security_id,\n              investmentType: data.raw.type,\n              // investmentType: data.raw.subtype,\n              unofficialCurrencyCode: data.raw.unofficial_currency_code\n            }\n          };\n          console.log('varQL:', varQL);\n          fnMutationPlaidInvestmentAdd({\n            variables: {\n              data: varQL\n            }\n          }).then(function (response) {});\n          break;\n        case PLAID.IMPORT_ITEM:\n          // fnMutationPlaidItemAdd(this.props.user.id, { variables: { data: varQL } }).then((response) => {\n          // });\n          break;\n        case PLAID.IMPORT_BALANCE:\n          break;\n      }\n    }\n  }, {\n    key: \"handleOnSuccess\",\n    value: function handleOnSuccess(public_token, metadata) {\n      // send token to client server\n\n      window.localStorage.setItem('plaid_connected', true);\n      window.localStorage.setItem('plaid_public_token', public_token);\n      this.props.plaidLogin(true, public_token);\n      var instance = this;\n      axios.post(Config.backend_server + \"/plaid/auth/public_token\", {\n        public_token: public_token\n      }).then(function (resp) {\n        instance.fnImportAccounts();\n      });\n    }\n  }, {\n    key: \"handleOnExit\",\n    value: function handleOnExit() {\n      // handle the case when your user exits Link\n      // For the sake of this tutorial, we're not going to be doing anything here.\n    }\n  }, {\n    key: \"getTransactions\",\n    value: function getTransactions() {\n      var _this3 = this;\n      axios.get(Config.backend_server + \"/plaid/transactions\").then(function (res) {\n        var cols = [{\n          title: 'Date',\n          dataIndex: 'date',\n          key: 'date'\n        }, {\n          title: 'Category',\n          dataIndex: 'category',\n          key: 'category'\n        }, {\n          title: 'Name',\n          dataIndex: 'name',\n          key: 'name'\n        }, {\n          title: 'Amount',\n          dataIndex: 'amount',\n          key: 'amount'\n        }, {\n          title: '',\n          key: 'id',\n          render: function render(record) {\n            if (_this3.props.user.role != ROLES.VIEW_ONLY) {\n              return /*#__PURE__*/React.createElement(\"span\", {\n                __self: _this3,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 229,\n                  columnNumber: 33\n                }\n              }, /*#__PURE__*/React.createElement(\"a\", {\n                className: \"report-action-btn report-action-btn--view\",\n                onClick: function onClick() {\n                  return _this3.fnImportPlaid(PLAID.IMPORT_TRANSACTION, record);\n                },\n                __self: _this3,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 230,\n                  columnNumber: 37\n                }\n              }, \"Import\"));\n            } else {\n              return /*#__PURE__*/React.createElement(React.Fragment, {\n                __self: _this3,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 236,\n                  columnNumber: 33\n                }\n              });\n            }\n          }\n        }];\n        var reports = [];\n        if (res.data.hasOwnProperty('transactions')) {\n          var accounts = res.data['accounts'];\n          var transactions = res.data['transactions'];\n          for (var aindex = 0; aindex < accounts.length; aindex++) {\n            var account_id = accounts[aindex]['account_id'];\n            var filterTransactions = [];\n            for (var index = 0; index < transactions.length; index++) {\n              if (transactions[index]['account_id'] == account_id) {\n                var category = '';\n                for (var cindex = 0; cindex < transactions[index]['category'].length; cindex++) {\n                  if (cindex == transactions[index]['category'].length - 1) {\n                    category = category + transactions[index]['category'][cindex];\n                  } else {\n                    category = category + transactions[index]['category'][cindex] + ', ';\n                  }\n                }\n                filterTransactions.push({\n                  key: index,\n                  date: transactions[index]['date'],\n                  category: category,\n                  name: transactions[index]['name'],\n                  amount: transactions[index]['amount'],\n                  raw: transactions[index]\n                });\n              }\n            }\n            reports.push({\n              reportData: filterTransactions,\n              reportCols: cols,\n              reportTitle: 'Transactions (' + accounts[aindex]['official_name'] + ')'\n            });\n          }\n        }\n        _this3.setState({\n          reports: reports,\n          dataLoaded: true\n        });\n      });\n    }\n  }, {\n    key: \"getIncome\",\n    value: function getIncome() {\n      var _this4 = this;\n      axios.get(Config.backend_server + \"/plaid/income\").then(function (res) {\n        var incomes;\n        var filterIncome = [];\n        if (res.data.hasOwnProperty('income')) {\n          incomes = res.data['income']['income_streams'];\n          for (var index = 0; index < incomes.length; index++) {\n            filterIncome.push({\n              key: index,\n              confidence: incomes[index]['confidence'],\n              days: incomes[index]['days'],\n              monthly_income: incomes[index]['monthly_income'],\n              name: incomes[index]['name'],\n              raw: res.data['income']\n            });\n          }\n        }\n        var cols = [{\n          title: 'Confidence',\n          dataIndex: 'confidence',\n          key: 'confidence'\n        }, {\n          title: 'Days',\n          dataIndex: 'days',\n          key: 'days'\n        }, {\n          title: 'Monthly Income',\n          dataIndex: 'monthly_income',\n          key: 'monthly_income'\n        }, {\n          title: 'Name',\n          dataIndex: 'name',\n          key: 'name'\n        }, {\n          title: '',\n          key: 'id',\n          render: function render(record) {\n            if (_this4.props.user.role != ROLES.VIEW_ONLY) {\n              return /*#__PURE__*/React.createElement(\"span\", {\n                __self: _this4,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 338,\n                  columnNumber: 33\n                }\n              }, /*#__PURE__*/React.createElement(\"a\", {\n                className: \"report-action-btn report-action-btn--view\",\n                onClick: function onClick() {\n                  return _this4.fnImportPlaid(PLAID.IMPORT_INCOME, record);\n                },\n                __self: _this4,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 339,\n                  columnNumber: 37\n                }\n              }, \"Import\"));\n            } else {\n              return /*#__PURE__*/React.createElement(React.Fragment, {\n                __self: _this4,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 345,\n                  columnNumber: 33\n                }\n              });\n            }\n          }\n        }];\n        _this4.setState({\n          reports: [{\n            reportData: filterIncome,\n            reportCols: cols,\n            reportTitle: 'Income'\n          }],\n          dataLoaded: true\n        });\n      });\n    }\n  }, {\n    key: \"getBalance\",\n    value: function getBalance() {\n      var _this5 = this;\n      axios.get(Config.backend_server + \"/plaid/balance\").then(function (res) {\n        var accounts;\n        var filterBalances = [];\n        if (res.data.hasOwnProperty('accounts')) {\n          accounts = res.data['accounts'];\n          for (var index = 0; index < accounts.length; index++) {\n            filterBalances.push({\n              key: index,\n              account_id: accounts[index]['account_id'],\n              name: accounts[index]['name'],\n              official_name: accounts[index]['official_name'],\n              type: accounts[index]['type'],\n              subtype: accounts[index]['subtype'],\n              balance_available: accounts[index]['balances']['available'],\n              balance_current: accounts[index]['balances']['current'],\n              raw: accounts[index]\n            });\n          }\n        }\n        var cols = [{\n          title: 'Account ID',\n          dataIndex: 'account_id',\n          key: 'account_id'\n        }, {\n          title: 'Name',\n          dataIndex: 'name',\n          key: 'name'\n        }, {\n          title: 'Official Name',\n          dataIndex: 'official_name',\n          key: 'official_name'\n        }, {\n          title: 'Type',\n          dataIndex: 'type',\n          key: 'type'\n        }, {\n          title: 'Subtype',\n          dataIndex: 'subtype',\n          key: 'subtype'\n        }, {\n          title: 'Balance Available',\n          dataIndex: 'balance_available',\n          key: 'balance_available'\n        }, {\n          title: 'Balance Current',\n          dataIndex: 'balance_current',\n          key: 'balance_current'\n        }, {\n          title: '',\n          key: 'id',\n          render: function render(record) {\n            if (_this5.props.user.role != ROLES.VIEW_ONLY) {\n              return /*#__PURE__*/React.createElement(\"span\", {\n                __self: _this5,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 430,\n                  columnNumber: 33\n                }\n              }, /*#__PURE__*/React.createElement(\"a\", {\n                className: \"report-action-btn report-action-btn--view\",\n                onClick: function onClick() {\n                  return _this5.fnImportPlaid(PLAID.IMPORT_BALANCE, record);\n                },\n                __self: _this5,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 431,\n                  columnNumber: 37\n                }\n              }, \"Import\"));\n            } else {\n              return /*#__PURE__*/React.createElement(React.Fragment, {\n                __self: _this5,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 437,\n                  columnNumber: 33\n                }\n              });\n            }\n          }\n        }];\n        _this5.setState({\n          reports: [{\n            reportData: filterBalances,\n            reportCols: cols,\n            reportTitle: 'Balance'\n          }],\n          dataLoaded: true\n        });\n      });\n    }\n  }, {\n    key: \"getAssets\",\n    value: function getAssets() {}\n  }, {\n    key: \"getInvestments\",\n    value: function getInvestments() {\n      var _this6 = this;\n      axios.get(Config.backend_server + \"/plaid/investments\").then(function (res) {\n        var investments;\n        var filterInvestments = [];\n        if (res.data.hasOwnProperty('investment_transactions')) {\n          investments = res.data['investment_transactions'];\n          for (var index = 0; index < investments.length; index++) {\n            filterInvestments.push({\n              key: index,\n              account_id: investments[index]['account_id'],\n              amount: investments[index]['amount'],\n              date: investments[index]['date'],\n              name: investments[index]['name'],\n              price: investments[index]['price'],\n              quantity: investments[index]['quantity'],\n              type: investments[index]['type'],\n              raw: investments[index]\n            });\n          }\n        }\n        var cols = [{\n          title: 'Account ID',\n          dataIndex: 'account_id',\n          key: 'account_id'\n        }, {\n          title: 'Amount',\n          dataIndex: 'amount',\n          key: 'amount'\n        }, {\n          title: 'Date',\n          dataIndex: 'date',\n          key: 'date'\n        }, {\n          title: 'Name',\n          dataIndex: 'name',\n          key: 'name'\n        }, {\n          title: 'Price',\n          dataIndex: 'price',\n          key: 'price'\n        }, {\n          title: 'Quantity',\n          dataIndex: 'quantity',\n          key: 'quantity'\n        }, {\n          title: 'Type',\n          dataIndex: 'type',\n          key: 'type'\n        }, {\n          title: '',\n          key: 'id',\n          render: function render(record) {\n            if (_this6.props.user.role != ROLES.VIEW_ONLY) {\n              return /*#__PURE__*/React.createElement(\"span\", {\n                __self: _this6,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 527,\n                  columnNumber: 33\n                }\n              }, /*#__PURE__*/React.createElement(\"a\", {\n                className: \"report-action-btn report-action-btn--view\",\n                onClick: function onClick() {\n                  return _this6.fnImportPlaid(PLAID.IMPORT_INVESTMENT, record);\n                },\n                __self: _this6,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 528,\n                  columnNumber: 37\n                }\n              }, \"Import\"));\n            } else {\n              return /*#__PURE__*/React.createElement(React.Fragment, {\n                __self: _this6,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 534,\n                  columnNumber: 33\n                }\n              });\n            }\n          }\n        }];\n        _this6.setState({\n          reports: [{\n            reportData: filterInvestments,\n            reportCols: cols,\n            reportTitle: 'Investment'\n          }],\n          dataLoaded: true\n        });\n      });\n    }\n  }, {\n    key: \"getLiabilities\",\n    value: function getLiabilities() {\n      var _this7 = this;\n      axios.get(Config.backend_server + \"/plaid/liabilities\").then(function (res) {\n        var reports = [];\n        if (res.data.hasOwnProperty('liabilities')) {\n          if (res.data['liabilities'].hasOwnProperty('credit')) {\n            var credits = res.data['liabilities']['credit'];\n            var filterCredits = [];\n            for (var index = 0; index < credits.length; index++) {\n              filterCredits.push({\n                key: index,\n                account_id: credits[index]['account_id'],\n                last_payment_amount: credits[index]['last_payment_amount'],\n                last_payment_date: credits[index]['last_payment_date'],\n                last_statement_balance: credits[index]['last_statement_balance'],\n                minimum_payment_amount: credits[index]['minimum_payment_amount'],\n                next_payment_due_date: credits[index]['next_payment_due_date'],\n                raw: credits[index]\n              });\n            }\n            var creditCols = [{\n              title: 'Account ID',\n              dataIndex: 'account_id',\n              key: 'account_id'\n            }, {\n              title: 'Last Payment Amount',\n              dataIndex: 'last_payment_amount',\n              key: 'last_payment_amount'\n            }, {\n              title: 'Last Payment Date',\n              dataIndex: 'last_payment_date',\n              key: 'last_payment_date'\n            }, {\n              title: 'Last Statement Balance',\n              dataIndex: 'last_statement_balance',\n              key: 'last_statement_balance'\n            }, {\n              title: 'Minimum Payment Amount',\n              dataIndex: 'minimum_payment_amount',\n              key: 'minimum_payment_amount'\n            }, {\n              title: 'Next Payment Due Date',\n              dataIndex: 'next_payment_due_date',\n              key: 'next_payment_due_date'\n            }];\n            reports.push({\n              reportData: filterCredits,\n              reportCols: creditCols,\n              reportTitle: 'Liabilities (Credit)'\n            });\n          }\n          if (res.data['liabilities'].hasOwnProperty('student')) {\n            var students = res.data['liabilities']['student'];\n            var filterStudents = [];\n            for (var index = 0; index < students.length; index++) {\n              filterStudents.push({\n                key: index,\n                account_id: students[index]['account_id'],\n                guarantor: students[index]['guarantor'],\n                interest_rate_percentage: students[index]['interest_rate_percentage'],\n                last_payment_date: students[index]['last_payment_date'],\n                last_statement_balance: students[index]['last_statement_balance'],\n                minimum_payment_amount: students[index]['minimum_payment_amount'],\n                next_payment_due_date: students[index]['next_payment_due_date'],\n                origination_date: students[index]['origination_date'],\n                origination_principal_amount: students[index]['origination_principal_amount'],\n                outstanding_interest_amount: students[index]['outstanding_interest_amount'],\n                ytd_interest_paid: students[index]['ytd_interest_paid'],\n                ytd_principal_paid: students[index]['ytd_principal_paid'],\n                raw: students[index]\n              });\n            }\n            var studentCols = [{\n              title: 'Account ID',\n              dataIndex: 'account_id',\n              key: 'account_id'\n            }, {\n              title: 'Guarantor',\n              dataIndex: 'guarantor',\n              key: 'guarantor'\n            }, {\n              title: 'Interest Rate Percentage',\n              dataIndex: 'interest_rate_percentage',\n              key: 'interest_rate_percentage'\n            }, {\n              title: 'Last Payment Date',\n              dataIndex: 'last_payment_date',\n              key: 'last_payment_date'\n            }, {\n              title: 'Last Statement Balance',\n              dataIndex: 'last_statement_balance',\n              key: 'last_statement_balance'\n            }, {\n              title: 'Minimum Payment Amount',\n              dataIndex: 'minimum_payment_amount',\n              key: 'minimum_payment_amount'\n            }, {\n              title: 'Next Payment Due Date',\n              dataIndex: 'next_payment_due_date',\n              key: 'next_payment_due_date'\n            }, {\n              title: 'Origination Date',\n              dataIndex: 'origination_date',\n              key: 'origination_date'\n            }, {\n              title: 'Origination Principal Amount',\n              dataIndex: 'origination_principal_amount',\n              key: 'origination_principal_amount'\n            }, {\n              title: 'Outstanding InterestAmount',\n              dataIndex: 'outstanding_interest_amount',\n              key: 'outstanding_interest_amount'\n            }, {\n              title: 'Ytd Interest Paid',\n              dataIndex: 'ytd_interest_paid',\n              key: 'ytd_interest_paid'\n            }, {\n              title: 'Ytd Principal Paid',\n              dataIndex: 'ytd_principal_paid',\n              key: 'ytd_principal_paid'\n            }];\n            reports.push({\n              reportData: filterStudents,\n              reportCols: studentCols,\n              reportTitle: 'Liabilities (Student)'\n            });\n          }\n        }\n        _this7.setState({\n          reports: reports,\n          dataLoaded: true\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this8 = this;\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 720,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(HiddenHook, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 721,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"top-btns-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 722,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(PlaidLink, {\n        clientName: \"React Plaid Setup\",\n        env: \"sandbox\",\n        product: [\"auth\", \"transactions\"],\n        publicKey: \"bd7569502deea3990dfc3886d403cf\",\n        onExit: this.handleOnExit,\n        onSuccess: this.handleOnSuccess,\n        className: \"plaid-connect-btn ant-btn ant-btn-primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 724,\n          columnNumber: 25\n        }\n      }, \"Connect Plaid\"), this.props.plaid_connected && /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 738,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        type: \"primary\",\n        onClick: function onClick() {\n          return _this8.fnImportAccounts();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 739,\n          columnNumber: 29\n        }\n      }, \"Import Accounts\"), /*#__PURE__*/React.createElement(Button, {\n        type: \"primary\",\n        onClick: function onClick() {\n          return _this8.getTransactions();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 740,\n          columnNumber: 29\n        }\n      }, \"Get Transactions\"), /*#__PURE__*/React.createElement(Button, {\n        type: \"primary\",\n        onClick: function onClick() {\n          return _this8.getIncome();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 741,\n          columnNumber: 29\n        }\n      }, \"Get Income\"), /*#__PURE__*/React.createElement(Button, {\n        type: \"primary\",\n        onClick: function onClick() {\n          return _this8.getBalance();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 742,\n          columnNumber: 29\n        }\n      }, \"Get Balance\"), /*#__PURE__*/React.createElement(Button, {\n        type: \"primary\",\n        onClick: function onClick() {\n          return _this8.getAssets();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 743,\n          columnNumber: 29\n        }\n      }, \"Get Assets\"), /*#__PURE__*/React.createElement(Button, {\n        type: \"primary\",\n        onClick: function onClick() {\n          return _this8.getInvestments();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 744,\n          columnNumber: 29\n        }\n      }, \"Get Investments\"), /*#__PURE__*/React.createElement(Button, {\n        type: \"primary\",\n        onClick: function onClick() {\n          return _this8.getLiabilities();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 745,\n          columnNumber: 29\n        }\n      }, \"Get Liabilities\"))), this.state.dataLoaded && this.state.reports.map(function (report, index) {\n        return /*#__PURE__*/React.createElement(Report, {\n          key: index,\n          cols: report.reportCols,\n          rows: report.reportData,\n          title: report.reportTitle,\n          __self: _this8,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 753,\n            columnNumber: 29\n          }\n        });\n      }));\n    }\n  }]);\n  return Plaid;\n}(Component);\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    user: state.rootReducer.loginUser.loginUserData,\n    plaid_connected: state.User.plaid_connected,\n    plaid_public_token: state.User.plaid_public_token\n  };\n};\nexport default connect(mapStateToProps, {\n  plaidLogin: plaidLogin\n})(Plaid);","map":{"version":3,"names":["React","Component","connect","Link","Modal","Button","ROLES","PlaidLink","axios","Report","Config","plaidLogin","useMutation","useQuery","QL_PLAID_ACCOUNT_ADD","QL_PLAID_INCOME_ADD","QL_PLAID_INVESTMENT_ADD","QL_PLAID_ITEM_ADD","fnMutationPlaidAccountAdd","fnMutationPlaidIncomeAdd","fnMutationPlaidInvestmentAdd","fnMutationPlaidItemAdd","HiddenHook","PLAID","IMPORT_TRANSACTION","IMPORT_ACCOUNT","IMPORT_INCOME","IMPORT_INVESTMENT","IMPORT_ITEM","IMPORT_BALANCE","Plaid","state","reports","reportData","reportCols","reportTitle","dataLoaded","handleOnSuccess","bind","handleOnExit","getTransactions","getIncome","getBalance","getAssets","getInvestments","getLiabilities","fnImportPlaid","fnImportAccounts","get","backend_server","then","res","accounts","data","console","log","varQL","index","length","accountId","props","user","id","plaidAccount","uuid","balances","available","current","iso_currency_code","limit","unofficial_currency_code","mask","name","officialName","subtype","plaidAccountType","variables","response","plaidImportType","plaidIncome","lastYearIncome","raw","last_year_income","lastYearIncomeBeforeTax","last_year_income_before_tax","maxNumberOfOverlappingIncomeStreams","max_number_of_overlapping_income_streams","numberOfIncomeStreams","number_of_income_streams","projectedYearlyIncome","projected_yearly_income","projectedYearlyIncomeBeforeTax","projected_yearly_income_before_tax","plaidInvestment","account_id","amount","cancelTransactionId","cancel_transaction_id","date","fees","investmentTransactionId","investment_transaction_id","isoCurrencyCode","price","quantity","securityId","security_id","investmentType","type","unofficialCurrencyCode","public_token","metadata","window","localStorage","setItem","instance","post","resp","cols","title","dataIndex","key","render","record","role","VIEW_ONLY","hasOwnProperty","transactions","aindex","filterTransactions","category","cindex","push","setState","incomes","filterIncome","confidence","days","monthly_income","filterBalances","official_name","balance_available","balance_current","investments","filterInvestments","credits","filterCredits","last_payment_amount","last_payment_date","last_statement_balance","minimum_payment_amount","next_payment_due_date","creditCols","students","filterStudents","guarantor","interest_rate_percentage","origination_date","origination_principal_amount","outstanding_interest_amount","ytd_interest_paid","ytd_principal_paid","studentCols","plaid_connected","map","report","mapStateToProps","rootReducer","loginUser","loginUserData","User","plaid_public_token"],"sources":["/home/albatross/gitCode/shared/src/pages/modules/budget/Plaid.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom'\nimport { Modal, Button } from 'antd';\nimport ROLES from 'constants/roles';\nimport PlaidLink from \"react-plaid-link\";\nimport axios from \"axios\";\nimport Report from 'components/Report';\nimport Config from 'Config';\nimport { plaidLogin } from 'redux/actions';\n\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport {\n    QL_PLAID_ACCOUNT_ADD,\n    QL_PLAID_INCOME_ADD,\n    QL_PLAID_INVESTMENT_ADD,\n    QL_PLAID_ITEM_ADD\n} from '../../../constants/queries';\n\nvar fnMutationPlaidAccountAdd = null;\nvar fnMutationPlaidIncomeAdd = null;\nvar fnMutationPlaidInvestmentAdd = null;\nvar fnMutationPlaidItemAdd = null;\n\n\nfunction HiddenHook(){\n    [fnMutationPlaidAccountAdd] = useMutation(QL_PLAID_ACCOUNT_ADD);\n    [fnMutationPlaidIncomeAdd] = useMutation(QL_PLAID_INCOME_ADD);\n    [fnMutationPlaidInvestmentAdd] = useMutation(QL_PLAID_INVESTMENT_ADD);\n    [fnMutationPlaidItemAdd] = useMutation(QL_PLAID_ITEM_ADD);\n\n    return (\n        <React.Fragment></React.Fragment>\n    )\n}\n\nconst PLAID = {\n    IMPORT_TRANSACTION: 'PLAID_IMPORT_TRANSACTION',\n    IMPORT_ACCOUNT: 'PLAID_IMPORT_ACCOUNT',\n    IMPORT_INCOME: 'PLAID_IMPORT_INCOME',\n    IMPORT_INVESTMENT: 'PLAID_IMPORT_INVESTMENT',\n    IMPORT_ITEM: 'PLAID_IMPORT_ITEM',\n    IMPORT_BALANCE: 'PLAID_IMPORT_BALANCE'\n}\nclass Plaid extends Component {\n\n    constructor() {\n        super();\n    \n        this.state = {\n            reports: {\n                reportData: [],\n                reportCols: {},\n                reportTitle: ''\n            },\n            dataLoaded: false\n        };\n    \n        this.handleOnSuccess = this.handleOnSuccess.bind(this);\n        this.handleOnExit = this.handleOnExit.bind(this);\n\n        this.getTransactions = this.getTransactions.bind(this);\n        this.getIncome = this.getIncome.bind(this);\n        this.getBalance = this.getBalance.bind(this);\n        this.getAssets = this.getAssets.bind(this);\n        this.getInvestments = this.getInvestments.bind(this);\n        this.getLiabilities = this.getLiabilities.bind(this);\n\n        this.fnImportPlaid = this.fnImportPlaid.bind(this);\n        this.fnImportAccounts = this.fnImportAccounts.bind(this);\n    }\n    \n    componentDidMount(){\n        \n    }\n\n    fnImportAccounts(){\n\n        axios.get(Config.backend_server + \"/plaid/accounts\").then(res => {\n            var accounts = res.data['accounts'];\n\n            console.log('accounts:', accounts);\n            let varQL = null;\n            for(var index = 0; index < accounts.length; index++){\n                varQL = {\n                    accountId: '' + this.props.user.id,\n                    plaidAccount: {\n                        uuid: accounts[index]['account_id'],\n                        balances: {\n                            available: accounts[index]['balances']['available'],\n                            current: accounts[index]['balances']['current'],\n                            iso_currency_code: accounts[index]['balances']['iso_currency_code'],\n                            limit: accounts[index]['balances']['limit'],\n                            unofficial_currency_code: accounts[index]['balances']['unofficial_currency_code'],\n                        },\n                        mask: accounts[index]['mask'],\n                        name: accounts[index]['name'],\n                        officialName: accounts[index]['offical_name'],\n                        subtype: accounts[index]['subtype'],\n                        plaidAccountType: accounts[index]['type'],\n                    }\n                }\n                console.log('varQL:', varQL);\n                fnMutationPlaidAccountAdd({ variables: { data: varQL } }).then((response) => {\n                });\n            }\n        });\n\n        \n    }\n\n    fnImportPlaid(plaidImportType, data){\n        console.log(plaidImportType, data);\n        let varQL = null;\n        switch(plaidImportType){\n            case PLAID.IMPORT_TRANSACTION: \n                break;\n            case PLAID.IMPORT_ACCOUNT: \n                // varQL = {\n\n                // }\n                // fnMutationPlaidAccountAdd(this.props.user.id, { variables: { data: varQL } }).then((response) => {\n                // });\n                break;\n            case PLAID.IMPORT_INCOME: \n                varQL = {\n                    accountId: '' + this.props.user.id,\n                    plaidIncome: {\n                        // incomeStreams: \n                        lastYearIncome: data.raw.last_year_income,\n                        lastYearIncomeBeforeTax: data.raw.last_year_income_before_tax,\n                        maxNumberOfOverlappingIncomeStreams: data.raw.max_number_of_overlapping_income_streams,\n                        numberOfIncomeStreams: data.raw.number_of_income_streams,\n                        projectedYearlyIncome: data.raw.projected_yearly_income,\n                        projectedYearlyIncomeBeforeTax: data.raw.projected_yearly_income_before_tax\n                    }\n                }\n                console.log('varQL:', varQL);\n                fnMutationPlaidIncomeAdd({ variables: { data: varQL } }).then((response) => {\n                });\n                break;\n\n            case PLAID.IMPORT_INVESTMENT: \n                \n                varQL = {\n                    accountId: '' + this.props.user.id,\n                    plaidInvestment: {\n                        uuid: data.raw.account_id,\n                        amount: data.raw.amount,\n                        cancelTransactionId: data.raw.cancel_transaction_id,\n                        date: data.raw.date,\n                        fees: data.raw.fees,\n                        investmentTransactionId: data.raw.investment_transaction_id,\n                        isoCurrencyCode: data.raw.iso_currency_code,\n                        name: data.raw.name,\n                        price: data.raw.price,\n                        quantity: data.raw.quantity,\n                        securityId: data.raw.security_id,\n                        investmentType: data.raw.type,\n                        // investmentType: data.raw.subtype,\n                        unofficialCurrencyCode: data.raw.unofficial_currency_code\n                    }\n                }\n                console.log('varQL:', varQL);\n                fnMutationPlaidInvestmentAdd({ variables: { data: varQL } }).then((response) => {\n                });\n                break;\n\n            case PLAID.IMPORT_ITEM: \n                \n                // fnMutationPlaidItemAdd(this.props.user.id, { variables: { data: varQL } }).then((response) => {\n                // });\n                break;\n\n            case PLAID.IMPORT_BALANCE: \n                break;\n        }\n    }\n\n    handleOnSuccess(public_token, metadata) {\n        // send token to client server\n\n        window.localStorage.setItem('plaid_connected', true);\n        window.localStorage.setItem('plaid_public_token', public_token);\n\n        this.props.plaidLogin(true, public_token);\n        var instance = this;\n        axios.post(Config.backend_server + \"/plaid/auth/public_token\", {\n            public_token: public_token\n        }).then(function(resp){\n            instance.fnImportAccounts();\n        });\n    }\n    \n    handleOnExit() {\n        // handle the case when your user exits Link\n        // For the sake of this tutorial, we're not going to be doing anything here.\n    }\n    \n    getTransactions() {\n        axios.get(Config.backend_server + \"/plaid/transactions\").then(res => {\n            const cols = [\n                {\n                    title: 'Date',\n                    dataIndex: 'date',\n                    key: 'date'\n                },\n                {\n                    title: 'Category',\n                    dataIndex: 'category',\n                    key: 'category'\n                },\n                {\n                    title: 'Name',\n                    dataIndex: 'name',\n                    key: 'name'\n                },\n                {\n                    title: 'Amount',\n                    dataIndex: 'amount',\n                    key: 'amount'\n                },\n                {\n                    title: '',\n                    key: 'id',\n                    render: (record) => {\n                        if(this.props.user.role != ROLES.VIEW_ONLY){\n                            return(\n                                <span>\n                                    <a className=\"report-action-btn report-action-btn--view\" onClick={() => this.fnImportPlaid(PLAID.IMPORT_TRANSACTION, record)}>Import</a>\n                                </span>\n                            )\n                        }\n                        else{\n                            return (\n                                <React.Fragment>\n                                </React.Fragment>\n                            )\n                        }\n                    }\n                }\n            ]\n\n            var reports = [];\n            if(res.data.hasOwnProperty('transactions')){\n                var accounts = res.data['accounts'];\n                var transactions = res.data['transactions'];\n                for(var aindex = 0; aindex < accounts.length; aindex++){\n                    var account_id = accounts[aindex]['account_id'];\n                    var filterTransactions = [];\n                    for(var index = 0; index < transactions.length; index++){\n                        if(transactions[index]['account_id'] == account_id){\n                            var category = '';\n                            for(var cindex = 0; cindex < transactions[index]['category'].length; cindex++){\n                                if(cindex == (transactions[index]['category'].length - 1)){\n                                    category = category + transactions[index]['category'][cindex];\n                                }\n                                else{\n                                    category = category + transactions[index]['category'][cindex] + ', ';\n                                }\n                            }\n                            filterTransactions.push({\n                                key: index,\n                                date: transactions[index]['date'],\n                                category: category,\n                                name: transactions[index]['name'],\n                                amount: transactions[index]['amount'],\n                                raw: transactions[index]\n                            })\n                        }\n                    }\n\n                    reports.push({\n                        reportData: filterTransactions,\n                        reportCols: cols,\n                        reportTitle: 'Transactions (' + accounts[aindex]['official_name'] + ')'\n                    })\n                }\n                                \n            }\n            \n            \n\n            this.setState({ \n                reports: reports,\n                dataLoaded: true\n            });\n        });\n    }\n\n    getIncome() {\n        axios.get(Config.backend_server + \"/plaid/income\").then(res => {\n            var incomes;\n            var filterIncome = [];\n            \n            if(res.data.hasOwnProperty('income')){\n                incomes = res.data['income']['income_streams'];\n                for(var index = 0; index < incomes.length; index++){\n\n                    filterIncome.push({\n                        key: index,\n                        confidence: incomes[index]['confidence'],\n                        days: incomes[index]['days'],\n                        monthly_income: incomes[index]['monthly_income'],\n                        name: incomes[index]['name'],\n                        raw: res.data['income']\n                    })\n                }\n            }\n\n            const cols = [\n                {\n                    title: 'Confidence',\n                    dataIndex: 'confidence',\n                    key: 'confidence'\n                },\n                {\n                    title: 'Days',\n                    dataIndex: 'days',\n                    key: 'days'\n                },\n                {\n                    title: 'Monthly Income',\n                    dataIndex: 'monthly_income',\n                    key: 'monthly_income'\n                },\n                {\n                    title: 'Name',\n                    dataIndex: 'name',\n                    key: 'name'\n                },\n                {\n                    title: '',\n                    key: 'id',\n                    render: (record) => {\n                        if(this.props.user.role != ROLES.VIEW_ONLY){\n                            return(\n                                <span>\n                                    <a className=\"report-action-btn report-action-btn--view\" onClick={() => this.fnImportPlaid(PLAID.IMPORT_INCOME, record)}>Import</a>\n                                </span>\n                            )\n                        }\n                        else{\n                            return (\n                                <React.Fragment>\n                                </React.Fragment>\n                            )\n                        }\n                    }\n                }\n            ]\n            \n            this.setState({ \n                reports: [\n                    {\n                        reportData: filterIncome,\n                        reportCols: cols,\n                        reportTitle: 'Income'\n                    }\n                ],\n                dataLoaded: true\n            });\n        });\n    }\n\n    getBalance() {\n        axios.get(Config.backend_server + \"/plaid/balance\").then(res => {\n            var accounts;\n            var filterBalances = [];\n            \n            if(res.data.hasOwnProperty('accounts')){\n                accounts = res.data['accounts'];\n                for(var index = 0; index < accounts.length; index++){\n                    filterBalances.push({\n                        key: index,\n                        account_id: accounts[index]['account_id'],\n                        name: accounts[index]['name'],\n                        official_name: accounts[index]['official_name'],\n                        type: accounts[index]['type'],\n                        subtype: accounts[index]['subtype'],\n                        balance_available: accounts[index]['balances']['available'],\n                        balance_current: accounts[index]['balances']['current'],\n                        raw: accounts[index]\n                    })\n                }\n            }\n            \n            const cols = [\n                {\n                    title: 'Account ID',\n                    dataIndex: 'account_id',\n                    key: 'account_id'\n                },\n                {\n                    title: 'Name',\n                    dataIndex: 'name',\n                    key: 'name'\n                },\n                {\n                    title: 'Official Name',\n                    dataIndex: 'official_name',\n                    key: 'official_name'\n                },\n                {\n                    title: 'Type',\n                    dataIndex: 'type',\n                    key: 'type'\n                },\n                {\n                    title: 'Subtype',\n                    dataIndex: 'subtype',\n                    key: 'subtype'\n                },\n                {\n                    title: 'Balance Available',\n                    dataIndex: 'balance_available',\n                    key: 'balance_available'\n                },\n                {\n                    title: 'Balance Current',\n                    dataIndex: 'balance_current',\n                    key: 'balance_current'\n                },\n                {\n                    title: '',\n                    key: 'id',\n                    render: (record) => {\n                        if(this.props.user.role != ROLES.VIEW_ONLY){\n                            return(\n                                <span>\n                                    <a className=\"report-action-btn report-action-btn--view\" onClick={() => this.fnImportPlaid(PLAID.IMPORT_BALANCE, record)}>Import</a>\n                                </span>\n                            )\n                        }\n                        else{\n                            return (\n                                <React.Fragment>\n                                </React.Fragment>\n                            )\n                        }\n                    }\n                }\n            ]\n            \n            this.setState({ \n                reports: [\n                    {\n                        reportData: filterBalances,\n                        reportCols: cols,\n                        reportTitle: 'Balance'\n                    }\n                ],\n                dataLoaded: true\n            });\n        });\n    }\n\n    getAssets() {\n\n    }\n\n    getInvestments() {\n        axios.get(Config.backend_server + \"/plaid/investments\").then(res => {\n            var investments;\n            var filterInvestments = [];\n            \n            if(res.data.hasOwnProperty('investment_transactions')){\n                investments = res.data['investment_transactions'];\n                for(var index = 0; index < investments.length; index++){\n\n                    filterInvestments.push({\n                        key: index,\n                        account_id: investments[index]['account_id'],\n                        amount: investments[index]['amount'],\n                        date: investments[index]['date'],\n                        name: investments[index]['name'],\n                        price: investments[index]['price'],\n                        quantity: investments[index]['quantity'],\n                        type: investments[index]['type'],\n                        raw: investments[index]\n                    })\n                }\n            }\n            \n            const cols = [\n                {\n                    title: 'Account ID',\n                    dataIndex: 'account_id',\n                    key: 'account_id'\n                },\n                {\n                    title: 'Amount',\n                    dataIndex: 'amount',\n                    key: 'amount'\n                },\n                {\n                    title: 'Date',\n                    dataIndex: 'date',\n                    key: 'date'\n                },\n                {\n                    title: 'Name',\n                    dataIndex: 'name',\n                    key: 'name'\n                },\n                {\n                    title: 'Price',\n                    dataIndex: 'price',\n                    key: 'price'\n                },\n                {\n                    title: 'Quantity',\n                    dataIndex: 'quantity',\n                    key: 'quantity'\n                },\n                {\n                    title: 'Type',\n                    dataIndex: 'type',\n                    key: 'type'\n                },\n                {\n                    title: '',\n                    key: 'id',\n                    render: (record) => {\n                        if(this.props.user.role != ROLES.VIEW_ONLY){\n                            return(\n                                <span>\n                                    <a className=\"report-action-btn report-action-btn--view\" onClick={() => this.fnImportPlaid(PLAID.IMPORT_INVESTMENT, record)}>Import</a>\n                                </span>\n                            )\n                        }\n                        else{\n                            return (\n                                <React.Fragment>\n                                </React.Fragment>\n                            )\n                        }\n                    }\n                }\n            ]\n            \n            this.setState({ \n                reports: [\n                    {\n                        reportData: filterInvestments,\n                        reportCols: cols,\n                        reportTitle: 'Investment',\n                    }\n                ],\n                dataLoaded: true\n            });\n        });\n    }\n\n    getLiabilities() {\n        axios.get(Config.backend_server + \"/plaid/liabilities\").then(res => {            \n            var reports = [];\n            \n            if(res.data.hasOwnProperty('liabilities')){\n                if(res.data['liabilities'].hasOwnProperty('credit')){\n                    var credits = res.data['liabilities']['credit'];\n                    var filterCredits = [];\n                    for(var index = 0; index < credits.length; index++){                        \n                        filterCredits.push({\n                            key: index,\n                            account_id: credits[index]['account_id'],\n                            last_payment_amount: credits[index]['last_payment_amount'],\n                            last_payment_date: credits[index]['last_payment_date'],\n                            last_statement_balance: credits[index]['last_statement_balance'],\n                            minimum_payment_amount: credits[index]['minimum_payment_amount'],\n                            next_payment_due_date: credits[index]['next_payment_due_date'],\n                            raw: credits[index]\n                        })\n                    }\n\n                    var creditCols = [\n                        {\n                            title: 'Account ID',\n                            dataIndex: 'account_id',\n                            key: 'account_id'\n                        },\n                        {\n                            title: 'Last Payment Amount',\n                            dataIndex: 'last_payment_amount',\n                            key: 'last_payment_amount'\n                        },\n                        {\n                            title: 'Last Payment Date',\n                            dataIndex: 'last_payment_date',\n                            key: 'last_payment_date'\n                        },\n                        {\n                            title: 'Last Statement Balance',\n                            dataIndex: 'last_statement_balance',\n                            key: 'last_statement_balance'\n                        },\n                        {\n                            title: 'Minimum Payment Amount',\n                            dataIndex: 'minimum_payment_amount',\n                            key: 'minimum_payment_amount'\n                        },\n                        {\n                            title: 'Next Payment Due Date',\n                            dataIndex: 'next_payment_due_date',\n                            key: 'next_payment_due_date'\n                        }\n                    ]\n\n                    reports.push({\n                        reportData: filterCredits,\n                        reportCols: creditCols,\n                        reportTitle: 'Liabilities (Credit)',\n                    })\n                }\n\n                if(res.data['liabilities'].hasOwnProperty('student')){\n                    var students = res.data['liabilities']['student'];\n                    var filterStudents = [];\n                    for(var index = 0; index < students.length; index++){                        \n                        filterStudents.push({\n                            key: index,\n                            account_id: students[index]['account_id'],\n                            guarantor: students[index]['guarantor'],\n                            interest_rate_percentage: students[index]['interest_rate_percentage'],\n                            last_payment_date: students[index]['last_payment_date'],\n                            last_statement_balance: students[index]['last_statement_balance'],\n                            minimum_payment_amount: students[index]['minimum_payment_amount'],\n                            next_payment_due_date: students[index]['next_payment_due_date'],\n                            origination_date: students[index]['origination_date'],\n                            origination_principal_amount: students[index]['origination_principal_amount'],\n                            outstanding_interest_amount: students[index]['outstanding_interest_amount'],\n                            ytd_interest_paid: students[index]['ytd_interest_paid'],\n                            ytd_principal_paid: students[index]['ytd_principal_paid'],\n                            raw: students[index]\n                        })\n                    }\n\n                    var studentCols = [\n                        {\n                            title: 'Account ID',\n                            dataIndex: 'account_id',\n                            key: 'account_id'\n                        },\n                        {\n                            title: 'Guarantor',\n                            dataIndex: 'guarantor',\n                            key: 'guarantor'\n                        },\n                        {\n                            title: 'Interest Rate Percentage',\n                            dataIndex: 'interest_rate_percentage',\n                            key: 'interest_rate_percentage'\n                        },\n                        {\n                            title: 'Last Payment Date',\n                            dataIndex: 'last_payment_date',\n                            key: 'last_payment_date'\n                        },\n                        {\n                            title: 'Last Statement Balance',\n                            dataIndex: 'last_statement_balance',\n                            key: 'last_statement_balance'\n                        },\n                        {\n                            title: 'Minimum Payment Amount',\n                            dataIndex: 'minimum_payment_amount',\n                            key: 'minimum_payment_amount'\n                        },\n                        {\n                            title: 'Next Payment Due Date',\n                            dataIndex: 'next_payment_due_date',\n                            key: 'next_payment_due_date'\n                        },\n                        {\n                            title: 'Origination Date',\n                            dataIndex: 'origination_date',\n                            key: 'origination_date'\n                        },\n                        {\n                            title: 'Origination Principal Amount',\n                            dataIndex: 'origination_principal_amount',\n                            key: 'origination_principal_amount'\n                        },\n                        {\n                            title: 'Outstanding InterestAmount',\n                            dataIndex: 'outstanding_interest_amount',\n                            key: 'outstanding_interest_amount'\n                        },\n                        {\n                            title: 'Ytd Interest Paid',\n                            dataIndex: 'ytd_interest_paid',\n                            key: 'ytd_interest_paid'\n                        },\n                        {\n                            title: 'Ytd Principal Paid',\n                            dataIndex: 'ytd_principal_paid',\n                            key: 'ytd_principal_paid'\n                        }\n                    ]\n\n                    reports.push({\n                        reportData: filterStudents,\n                        reportCols: studentCols,\n                        reportTitle: 'Liabilities (Student)',\n                    })\n                }\n                \n            }\n            \n            this.setState({ \n                reports: reports,\n                dataLoaded: true\n            });\n        });\n    }\n    \n    render() {\n        \n        return (\n            <React.Fragment>         \n                <HiddenHook />\n                <div className=\"top-btns-container\">\n                    {\n                        <PlaidLink\n                            clientName=\"React Plaid Setup\"\n                            env=\"sandbox\"\n                            product={[\"auth\", \"transactions\"]}\n                            publicKey=\"bd7569502deea3990dfc3886d403cf\"\n                            onExit={this.handleOnExit}\n                            onSuccess={this.handleOnSuccess}\n                            className=\"plaid-connect-btn ant-btn ant-btn-primary\"\n                        >\n                            Connect Plaid\n                        </PlaidLink>\n                    }\n                    {\n                        this.props.plaid_connected &&\n                        <React.Fragment>\n                            <Button type=\"primary\" onClick={() => this.fnImportAccounts()}>Import Accounts</Button>\n                            <Button type=\"primary\" onClick={() => this.getTransactions()}>Get Transactions</Button>\n                            <Button type=\"primary\" onClick={() => this.getIncome()}>Get Income</Button>\n                            <Button type=\"primary\" onClick={() => this.getBalance()}>Get Balance</Button>\n                            <Button type=\"primary\" onClick={() => this.getAssets()}>Get Assets</Button>\n                            <Button type=\"primary\" onClick={() => this.getInvestments()}>Get Investments</Button>\n                            <Button type=\"primary\" onClick={() => this.getLiabilities()}>Get Liabilities</Button>\n                        </React.Fragment>\n                    }       \n                </div>\n                {\n                    this.state.dataLoaded &&\n                    this.state.reports.map((report, index) => {\n                        return (\n                            <Report \n                                key={index}\n                                cols={report.reportCols} \n                                rows={report.reportData}\n                                title={report.reportTitle}\n                            ></Report>\n                        )\n                    })\n                }             \n            </React.Fragment>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        user: state.rootReducer.loginUser.loginUserData,\n\n        plaid_connected: state.User.plaid_connected,\n        plaid_public_token: state.User.plaid_public_token\n    }\n}\n\nexport default connect(mapStateToProps, { plaidLogin })(Plaid);"],"mappings":"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"},"metadata":{},"sourceType":"module"}