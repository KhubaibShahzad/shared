{"ast":null,"code":"import _classCallCheck from \"/home/albatross/gitCode/shared/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/albatross/gitCode/shared/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/albatross/gitCode/shared/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/albatross/gitCode/shared/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/albatross/gitCode/shared/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/albatross/gitCode/shared/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _slicedToArray from \"/home/albatross/gitCode/shared/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/albatross/gitCode/shared/src/pages/modules/income/IncomeNew.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Icon } from 'antd';\nimport ImageIcon from 'assets/images/asset.png';\nimport AssetPlanet from 'assets/images/asset-planet-logo.jpg';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { QL_INCOME_ADD, QL_INCOME_UPDATE, QL_INCOME_GET } from '../../../constants/queries';\nimport { FormPagePose } from '../../../components/Animations';\nimport IncomeTypeSubForm from './subforms/IncomeTypeSubForm';\nimport IncomeDetailsSubForm from './subforms/IncomeDetailsSubForm';\nimport AnnuityDetailsSubForm from './subforms/AnnuityDetailsSubForm';\nimport IncomeTaxationSubForm from './subforms/IncomeTaxationSubForm';\nimport IndependantIncomeSubForm from './subforms/IndependantIncomeSubForm';\nimport MilitaryBenefitsSubForm from './subforms/MilitaryBenefitsSubForm';\nimport OtherIncomeDetailsSubForm from './subforms/OtherIncomeDetailsSubForm';\nimport PensionDetailsSubForm from './subforms/PensionDetailsSubForm';\nimport QuestionIncomeTypeSubForm from './subforms/QuestionIncomeTypeSubForm';\nimport W2IncomeSubForm from './subforms/W2IncomeSubForm';\nimport EndSubForm from './subforms/EndSubForm';\nvar fnMutationIncomeAdd = null;\nvar dataMutationIncomeAdd = null;\nvar fnMutationIncomeUpdate = null;\nvar dataMutationIncomeUpdate = null;\nvar prevPos = 0;\nfunction HiddenHook() {\n  var _useMutation = useMutation(QL_INCOME_ADD);\n  var _useMutation2 = _slicedToArray(_useMutation, 2);\n  fnMutationIncomeAdd = _useMutation2[0];\n  dataMutationIncomeAdd = _useMutation2[1].dataMutationIncomeAdd;\n  var _useMutation3 = useMutation(QL_INCOME_UPDATE);\n  var _useMutation4 = _slicedToArray(_useMutation3, 2);\n  fnMutationIncomeUpdate = _useMutation4[0];\n  dataMutationIncomeUpdate = _useMutation4[1].dataMutationIncomeUpdate;\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  });\n}\nfunction convertDB2FormData(data) {\n  var formData = [];\n  formData.push({\n    id: 'IncomeTypeSubForm',\n    data: IncomeTypeSubForm.FnCreateFormData({\n      value: data['income']['incomeType']\n    }),\n    visible: true\n  });\n  formData.push({\n    id: 'AnnuityDetailsSubForm',\n    data: AnnuityDetailsSubForm.FnCreateFormData({\n      percentToSurvivor: data['income']['percentToSurvivor']\n    }),\n    visible: true\n  });\n  formData.push({\n    id: 'IncomeDetailsSubForm',\n    data: IncomeDetailsSubForm.FnCreateFormData({\n      nicknameIncome: data['income']['nicknameIncome'],\n      owner: data['income']['owner'],\n      frequencyPayPeriod: data['income']['frequencyOfPayPeriods'],\n      grossWages: data['income']['grossWages'],\n      dateIncomeStarts: data['income']['dateIncomeStarts'],\n      dateIncomeEnds: data['income']['dateIncomeEnds'],\n      yearlyIncrease: data['income']['percentageYearlyIncrease'],\n      incomeSourceFromAssets: data['income']['incomeSourceFromAsset'],\n      notes: data['income']['notes']\n    }),\n    visible: true\n  });\n  formData.push({\n    id: 'IncomeTaxationSubForm',\n    data: IncomeTaxationSubForm.FnCreateFormData({\n      federalTaxationType: data['income']['incomeTaxation']['federalTaxationType'],\n      stateTaxationType: data['income']['incomeTaxation']['stateTaxationType'],\n      adjustedGrossIncome: data['income']['incomeTaxation']['adjustedGrossIncome'] ? 'Yes' : 'No',\n      passiveEarned: data['income']['incomeTaxation']['passiveOrEarned'],\n      amountFederalTaxation: data['income']['incomeTaxation']['amountSubjectToFederalTaxation']\n    }),\n    visible: true\n  });\n  formData.push({\n    id: 'IndependantIncomeSubForm',\n    data: IndependantIncomeSubForm.FnCreateFormData({\n      lessAdjustment: data['income']['independentContractor']['lessSelfEmploymentAdjustment'],\n      taxableEarnings: data['income']['independentContractor']['taxableSelfEmploymentEarnings']\n    }),\n    visible: true\n  });\n  formData.push({\n    id: 'MilitaryBenefitsSubForm',\n    data: MilitaryBenefitsSubForm.FnCreateFormData({\n      stateTax: data['income']['militaryBenefit']['amountSubjectToStateTax'],\n      payeeSurvivorBenefits: data['income']['militaryBenefit']['payeeOfSurvivorBenefits'],\n      percentToSurvivor: data['income']['militaryBenefit']['percentToSurvivor']\n    }),\n    visible: true\n  });\n  formData.push({\n    id: 'OtherIncomeDetailsSubForm',\n    data: OtherIncomeDetailsSubForm.FnCreateFormData({\n      otherIncomeType: data['income']['otherIncomeType']\n    }),\n    visible: true\n  });\n  formData.push({\n    id: 'PensionDetailsSubForm',\n    data: PensionDetailsSubForm.FnCreateFormData({\n      percentToSurvivor: data['income']['percentToSurvivor']\n    }),\n    visible: true\n  });\n  formData.push({\n    id: 'QuestionIncomeTypeSubForm',\n    data: QuestionIncomeTypeSubForm.FnCreateFormData({\n      typeEmployementIncome: ''\n    }),\n    visible: true\n  });\n  formData.push({\n    id: 'W2IncomeSubForm',\n    data: W2IncomeSubForm.FnCreateFormData({\n      federalTaxes: data['income']['employee']['federalTaxes'],\n      stateTaxes: data['income']['employee']['stateTaxes'],\n      employmentRetirmentContributions: data['income']['employee']['employeeRetirementContributions']\n    }),\n    visible: true\n  });\n  return formData;\n}\nfunction LoadDBDataHook(props) {\n  if (props.dbID != null && props.dbID != '') {\n    var _useQuery = useQuery(QL_INCOME_GET, {\n        variables: {\n          id: props.dbID\n        }\n      }),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error;\n    if (data) {\n      console.log('call..');\n      props.cbLoadDBData(convertDB2FormData(data));\n    }\n  }\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }\n  });\n}\nvar IncomeNew = /*#__PURE__*/function (_Component) {\n  _inherits(IncomeNew, _Component);\n  function IncomeNew(props) {\n    var _this;\n    _classCallCheck(this, IncomeNew);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(IncomeNew).call(this, props));\n    _this.toggleRightSide = function (e) {\n      e.preventDefault();\n      _this.setState({\n        isRightSideOpen: !_this.state.isRightSideOpen\n      });\n    };\n    var dbID = null;\n    var dbLoaded = true;\n    var incomeID = _this.props.match.params.incomeID;\n    if (incomeID) {\n      dbID = incomeID;\n      dbLoaded = false;\n    }\n    _this.state = {\n      dataID: dbID,\n      curSubFormID: 'IncomeTypeSubForm',\n      curSubForm: IncomeTypeSubForm,\n      formVisible: false,\n      subFormData: {},\n      formData: [\n        // {\n        //     id: 'assetsInformation',\n        //     data: {\n        //         title: '',\n        //         fields: [\n        //             {\n        //                 id: '' ,\n        //                 title: '',\n        //                 value: ''\n        //              }   \n        //         ]\n        //     }\n        // }\n      ],\n      formSteps: [{\n        id: 'IncomeTypeSubForm',\n        icon: 'icon_ex.png',\n        title: 'Type of Income'\n      }, {\n        id: 'IncomeDetailsSubForm',\n        icon: 'icon_ex.png',\n        title: 'Income Details'\n      }, {\n        id: 'StepAdditionalDetails',\n        icon: 'icon_ex.png',\n        title: 'Additional Details'\n      }, {\n        id: 'IncomeTaxationSubForm',\n        icon: 'icon_ex.png',\n        title: 'Taxation'\n      }],\n      dbLoaded: dbLoaded,\n      dbID: dbID,\n      isEndForm: false\n    };\n    _this.goSubForm = _this.goSubForm.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.updateSubForm = _this.updateSubForm.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getSubFormData = _this.getSubFormData.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getSubFormField = _this.getSubFormField.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.createQLVariable = _this.createQLVariable.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getSubFormFieldValue = _this.getSubFormFieldValue.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.toggleRightSide = _this.toggleRightSide.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.loadDBData = _this.loadDBData.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n  _createClass(IncomeNew, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.goSubForm(\"IncomeTypeSubForm\");\n      // this.goSubForm(\"IncomeTaxationSubForm\");\n    }\n  }, {\n    key: \"getSubFormField\",\n    value: function getSubFormField(formID, fieldID) {\n      var formData = this.state.formData;\n      for (var index = 0; index < formData.length; index++) {\n        if (formData[index]['id'] == formID) {\n          var data = formData[index]['data'];\n          var fields = data['fields'];\n          for (var findex = 0; findex < fields.length; findex++) {\n            if (fields[findex]['id'] == fieldID) {\n              return fields[findex];\n            }\n          }\n        }\n      }\n      return null;\n    }\n  }, {\n    key: \"getSubFormFieldValue\",\n    value: function getSubFormFieldValue(formID, fieldID) {\n      var field = this.getSubFormField(formID, fieldID);\n      if (field == null) {\n        return '';\n      } else {\n        return field.value;\n      }\n    }\n  }, {\n    key: \"createQLVariable\",\n    value: function createQLVariable(subFormID, subFormData) {\n      var varQL = null;\n      switch (subFormID) {\n        case 'IncomeTypeSubForm':\n          varQL = {\n            \"income\": {\n              \"incomeType\": this.getSubFormFieldValue(subFormID, 'incomeType')\n            }\n          };\n          break;\n        case 'AnnuityDetailsSubForm':\n          varQL = {\n            \"income\": {\n              \"percentToSurvivor\": parseInt(this.getSubFormFieldValue(subFormID, 'percentToSurvivor'))\n            }\n          };\n          break;\n        case 'IncomeDetailsSubForm':\n          varQL = {\n            \"income\": {\n              \"nicknameIncome\": this.getSubFormFieldValue(subFormID, 'nicknameIncome'),\n              \"owner\": this.getSubFormFieldValue(subFormID, 'owner'),\n              \"frequencyOfPayPeriods\": this.getSubFormFieldValue(subFormID, 'frequencyPayPeriod'),\n              \"grossWages\": parseInt(this.getSubFormFieldValue(subFormID, 'grossWages')),\n              \"dateIncomeStarts\": this.getSubFormFieldValue(subFormID, 'dateIncomeStarts'),\n              \"dateIncomeEnds\": this.getSubFormFieldValue(subFormID, 'dateIncomeEnds'),\n              \"percentageYearlyIncrease\": this.getSubFormFieldValue(subFormID, 'yearlyIncrease') != '' ? parseInt(this.getSubFormFieldValue(subFormID, 'yearlyIncrease')) : 0,\n              \"incomeSourceFromAsset\": this.getSubFormFieldValue(subFormID, 'incomeSourceFromAssets'),\n              \"notes\": this.getSubFormFieldValue(subFormID, 'notes')\n            }\n          };\n          break;\n        case 'IncomeTaxationSubForm':\n          varQL = {\n            \"incomeTaxation\": {\n              \"federalTaxationType\": this.getSubFormFieldValue(subFormID, 'federalTaxationType'),\n              \"stateTaxationType\": this.getSubFormFieldValue(subFormID, 'stateTaxationType'),\n              \"adjustedGrossIncome\": this.getSubFormFieldValue(subFormID, 'adjustedGrossIncome') == 'Yes' ? true : false,\n              \"passiveOrEarned\": this.getSubFormFieldValue(subFormID, 'passiveEarned'),\n              \"amountSubjectToFederalTaxation\": parseInt(this.getSubFormFieldValue(subFormID, 'amountFederalTaxation'))\n            }\n          };\n          break;\n        case 'IndependantIncomeSubForm':\n          varQL = {\n            \"independentContractor\": {\n              \"lessSelfEmploymentAdjustment\": parseInt(this.getSubFormFieldValue(subFormID, 'lessAdjustment')),\n              // \"annualSocialSecurityTax\": parseInt(this.getSubFormFieldValue(subFormID, 'stateTaxationType')),\n              \"taxableSelfEmploymentEarnings\": parseInt(this.getSubFormFieldValue(subFormID, 'taxableEarnings'))\n              // \"annualMedicareTax\": parseInt(this.getSubFormFieldValue(subFormID, 'passiveEarned')),\n              // \"annualAdditionalMedicareTax\": parseInt(this.getSubFormFieldValue(subFormID, 'amountFederalTaxation')),\n              // \"totalSelfEmploymentTax\": parseInt(this.getSubFormFieldValue(subFormID, 'amountFederalTaxation')),\n              // \"totalDeductionPortion\": parseInt(this.getSubFormFieldValue(subFormID, 'amountFederalTaxation'))\n            }\n          };\n\n          break;\n        case 'MilitaryBenefitsSubForm':\n          varQL = {\n            \"militaryBenefit\": {\n              \"amountSubjectToStateTax\": this.getSubFormFieldValue(subFormID, 'stateTax') != '' ? parseFloat(this.getSubFormFieldValue(subFormID, 'stateTax')) : 0,\n              \"payeeOfSurvivorBenefits\": this.getSubFormFieldValue(subFormID, 'payeeSurvivorBenefits') != '' ? parseFloat(this.getSubFormFieldValue(subFormID, 'payeeSurvivorBenefits')) : 0,\n              \"percentToSurvivor\": this.getSubFormFieldValue(subFormID, 'percentToSurvivor') != '' ? parseFloat(this.getSubFormFieldValue(subFormID, 'percentToSurvivor')) : 0\n            },\n            \"income\": {\n              \"percentToSurvivor\": this.getSubFormFieldValue(subFormID, 'percentToSurvivor') != '' ? parseInt(this.getSubFormFieldValue(subFormID, 'percentToSurvivor')) : 0\n            }\n          };\n          break;\n        case 'OtherIncomeDetailsSubForm':\n          varQL = {\n            \"income\": {\n              \"otherIncomeType\": this.getSubFormFieldValue(subFormID, 'otherIncomeType')\n            }\n          };\n          break;\n        case 'PensionDetailsSubForm':\n          varQL = {\n            \"income\": {\n              \"percentToSurvivor\": this.getSubFormFieldValue(subFormID, 'percentToSurvivor')\n            }\n          };\n          break;\n        case 'QuestionIncomeTypeSubForm':\n          varQL = {\n            \"earnedIncomeInformation\": {\n              \"typeOfEmploymentIncome\": this.getSubFormFieldValue(subFormID, 'typeEmployementIncome')\n            }\n          };\n          break;\n        case 'W2IncomeSubForm':\n          varQL = {\n            \"employee\": {\n              \"federalTaxes\": parseInt(this.getSubFormFieldValue(subFormID, 'federalTaxes')),\n              \"stateTaxes\": parseInt(this.getSubFormFieldValue(subFormID, 'stateTaxes')),\n              \"employeeRetirementContributions\": parseInt(this.getSubFormFieldValue(subFormID, 'employmentRetirmentContributions'))\n              // \"totalAnnualFederalTaxes\": parseInt(this.getSubFormFieldValue(subFormID, 'typeEmployementIncome')),\n              // \"totalAnnualStateTaxes\": parseInt(this.getSubFormFieldValue(subFormID, 'typeEmployementIncome')),\n              // \"totalEmployeeRetirementContributions\": parseInt(this.getSubFormFieldValue(subFormID, 'typeEmployementIncome')),\n            }\n          };\n\n          break;\n        case 'EndSubForm':\n      }\n      return varQL;\n    }\n  }, {\n    key: \"updateSubForm\",\n    value: function updateSubForm(subFormID, subFormData) {\n      var visible = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var formData = this.state.formData;\n      var bFound = false;\n      for (var findex = 0; findex < formData.length; findex++) {\n        if (formData[findex]['id'] == subFormID) {\n          formData[findex]['data'] = subFormData;\n          bFound = true;\n        }\n      }\n      if (!bFound) {\n        formData.push({\n          id: subFormID,\n          data: subFormData,\n          visible: visible\n        });\n      }\n      var varQL = this.createQLVariable(subFormID, subFormData);\n      console.log('varQL:', varQL, ', dataID:', this.state.dataID);\n      var instance = this;\n      if (varQL != null) {\n        if (this.state.dataID == null) {\n          fnMutationIncomeAdd({\n            variables: {\n              data: varQL\n            }\n          }).then(function (response) {\n            instance.setState({\n              dataID: response['data']['createIncome']['id']\n            });\n          });\n        } else {\n          fnMutationIncomeUpdate({\n            variables: {\n              id: this.state.dataID,\n              data: varQL\n            }\n          });\n        }\n      }\n      this.setState({\n        formData: formData\n      });\n    }\n  }, {\n    key: \"getSubFormData\",\n    value: function getSubFormData(subFormID) {\n      var fromState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var pformData = arguments.length > 2 ? arguments[2] : undefined;\n      var formData;\n      if (fromState) {\n        formData = this.state.formData;\n      } else {\n        formData = pformData;\n      }\n      for (var findex = 0; findex < formData.length; findex++) {\n        if (formData[findex]['id'] == subFormID) {\n          return formData[findex]['data'];\n        }\n      }\n      return {};\n    }\n  }, {\n    key: \"goSubForm\",\n    value: function goSubForm(subFormID) {\n      var _this2 = this;\n      this.setState({\n        formVisible: false\n      });\n      var nextSubForm = IncomeTypeSubForm;\n      var subFormData = this.getSubFormData(subFormID);\n      switch (subFormID) {\n        case 'IncomeTypeSubForm':\n          nextSubForm = IncomeTypeSubForm;\n          this.setState({\n            isEndForm: false,\n            formData: []\n          });\n          break;\n        case 'AnnuityDetailsSubForm':\n          nextSubForm = AnnuityDetailsSubForm;\n          break;\n        case 'IncomeDetailsSubForm':\n          nextSubForm = IncomeDetailsSubForm;\n          break;\n        case 'IncomeTaxationSubForm':\n          nextSubForm = IncomeTaxationSubForm;\n          break;\n        case 'IndependantIncomeSubForm':\n          nextSubForm = IndependantIncomeSubForm;\n          break;\n        case 'MilitaryBenefitsSubForm':\n          nextSubForm = MilitaryBenefitsSubForm;\n          break;\n        case 'OtherIncomeDetailsSubForm':\n          nextSubForm = OtherIncomeDetailsSubForm;\n          break;\n        case 'PensionDetailsSubForm':\n          nextSubForm = PensionDetailsSubForm;\n          break;\n        case 'QuestionIncomeTypeSubForm':\n          nextSubForm = QuestionIncomeTypeSubForm;\n          break;\n        case 'W2IncomeSubForm':\n          nextSubForm = W2IncomeSubForm;\n          break;\n        case 'EndSubForm':\n          nextSubForm = EndSubForm;\n          this.setState({\n            isEndForm: true\n          });\n          break;\n        case 'StepAdditionalDetails':\n          switch (this.getSubFormFieldValue('IncomeTypeSubForm', 'incomeType')) {\n            case \"Military Benefits\":\n              nextSubForm = MilitaryBenefitsSubForm;\n              break;\n            case \"Pension\":\n              nextSubForm = PensionDetailsSubForm;\n              break;\n            case \"Annuity\":\n              nextSubForm = AnnuityDetailsSubForm;\n              break;\n            case \"Other\":\n              nextSubForm = OtherIncomeDetailsSubForm;\n              break;\n            case \"Bonus from Work\":\n            case \"Earned Income From Work\":\n            case \"Sales Commision from Work\":\n              nextSubForm = QuestionIncomeTypeSubForm;\n              break;\n            default:\n              nextSubForm = IncomeTaxationSubForm;\n              break;\n          }\n          break;\n      }\n      setTimeout(function () {\n        _this2.setState({\n          formVisible: true,\n          curSubFormID: subFormID,\n          curSubForm: nextSubForm,\n          subFormData: subFormData\n        });\n      }, 100);\n    }\n  }, {\n    key: \"loadDBData\",\n    value: function loadDBData(formData) {\n      console.log('formData:', formData);\n      var instance = this;\n      setTimeout(function () {\n        instance.setState({\n          formVisible: true,\n          dbLoaded: true,\n          formData: formData,\n          subFormData: instance.getSubFormData(instance.state.curSubFormID, false, formData)\n        });\n      }, 100);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n      var navlinks = [{\n        href: '/',\n        title: 'Home'\n      }, {\n        href: '/modules',\n        title: 'Modules'\n      }, {\n        href: '/income',\n        title: 'Income'\n      }];\n      var SubForm = this.state.curSubForm;\n      var formpageClassName = 'form-page-container-wrap';\n      if (this.state.isRightSideOpen) {\n        formpageClassName = 'form-page-container-wrap right-side--opend';\n      } else {\n        formpageClassName = 'form-page-container-wrap right-side--collapsed';\n      }\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: formpageClassName,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 575,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-page--main-side\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 576,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"steps\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 577,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"logo-container align-items-top justify-content-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 578,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        className: \"img-asset\",\n        src: AssetPlanet,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 579,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"process\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 581,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"process-row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 582,\n          columnNumber: 29\n        }\n      }, this.state.formSteps.map(function (formStep, index) {\n        var classBtn = 'btn nav-items btn-circle';\n        var elementPos = _this3.state.formSteps.map(function (x) {\n          return x.id;\n        }).indexOf(_this3.state.curSubFormID);\n        if (elementPos === -1) {\n          elementPos = prevPos + 1;\n        } else {\n          prevPos = elementPos;\n        }\n        classBtn = elementPos >= index ? 'btn nav-items btn-circle active' : 'btn nav-items btn-circle';\n        if (_this3.state.isEndForm && index > 0 || elementPos === 0 && index > 0) classBtn = 'btn nav-items btn-circle disabled';\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"process-step\",\n          key: index,\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 599,\n            columnNumber: 45\n          }\n        }, /*#__PURE__*/React.createElement(\"button\", {\n          type: \"button\",\n          className: classBtn,\n          \"data-toggle\": \"tab\",\n          onClick: function onClick() {\n            if (classBtn !== 'btn nav-items btn-circle disabled') _this3.goSubForm(formStep.id);\n          },\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 600,\n            columnNumber: 49\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            fontSize: 30,\n            color: '#006400'\n          },\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 605,\n            columnNumber: 53\n          }\n        }, index + 1)), /*#__PURE__*/React.createElement(\"p\", {\n          className: \"step-title\",\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 609,\n            columnNumber: 49\n          }\n        }, formStep.title));\n      })))), /*#__PURE__*/React.createElement(HiddenHook, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 617,\n          columnNumber: 21\n        }\n      }), !this.state.dbLoaded && /*#__PURE__*/React.createElement(LoadDBDataHook, {\n        dbLoaded: this.state.dbLoaded,\n        dbID: this.state.dbID,\n        cbLoadDBData: this.loadDBData,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 620,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 626,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"page-nav-history\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 627,\n          columnNumber: 25\n        }\n      }), !this.state.dbLoaded && /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 643,\n          columnNumber: 53\n        }\n      }, \"Loading...\"), this.state.dbLoaded && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-page-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 647,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-page--left-side\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 648,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(FormPagePose, {\n        className: \"info-form-block\",\n        pose: this.state.formVisible ? 'visible' : 'hidden',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 649,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(SubForm, {\n        subFormData: this.state.subFormData,\n        cbGoSubForm: this.goSubForm,\n        cbUpdateSubForm: this.updateSubForm,\n        formData: this.state.formData,\n        cbGetSubFormField: this.getSubFormField,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 650,\n          columnNumber: 41\n        }\n      })))))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-page--right-side\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 663,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"right-side-collapse-icon\",\n        onClick: this.toggleRightSide,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 664,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: \"fe-menu\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 665,\n          columnNumber: 25\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-page--right-side-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 667,\n          columnNumber: 21\n        }\n      }, this.state.formData.map(function (subForm, sindex) {\n        if (subForm.visible == false) {\n          return /*#__PURE__*/React.createElement(\"div\", {\n            key: sindex,\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 671,\n              columnNumber: 45\n            }\n          });\n        }\n        var subFormData = subForm.data;\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"form-brief-block\",\n          key: sindex,\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 676,\n            columnNumber: 33\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"form-brief-top\",\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 677,\n            columnNumber: 37\n          }\n        }, /*#__PURE__*/React.createElement(\"h4\", {\n          className: \"form-brief-title\",\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 678,\n            columnNumber: 41\n          }\n        }, subFormData.title), /*#__PURE__*/React.createElement(\"span\", {\n          className: \"form-brief-edit-btn\",\n          onClick: function onClick() {\n            return _this3.goSubForm(subForm.id);\n          },\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 679,\n            columnNumber: 41\n          }\n        }, /*#__PURE__*/React.createElement(Icon, {\n          type: \"edit\",\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 679,\n            columnNumber: 122\n          }\n        }))), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"form-brief-content\",\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 681,\n            columnNumber: 37\n          }\n        }, subFormData.fields.map(function (field, ffindex) {\n          return /*#__PURE__*/React.createElement(\"div\", {\n            className: \"form-brief-item\",\n            key: ffindex,\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 685,\n              columnNumber: 49\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            className: \"form-brief-item-title\",\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 686,\n              columnNumber: 53\n            }\n          }, field.title != '' ? field.title + \":\" : null, \" \"), /*#__PURE__*/React.createElement(\"p\", {\n            className: \"form-brief-item-value\",\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 687,\n              columnNumber: 53\n            }\n          }, field.value));\n        })));\n      }))));\n    }\n  }]);\n  return IncomeNew;\n}(Component);\nexport default connect()(IncomeNew);","map":{"version":3,"names":["React","Component","connect","Link","Icon","ImageIcon","AssetPlanet","useMutation","useQuery","QL_INCOME_ADD","QL_INCOME_UPDATE","QL_INCOME_GET","FormPagePose","IncomeTypeSubForm","IncomeDetailsSubForm","AnnuityDetailsSubForm","IncomeTaxationSubForm","IndependantIncomeSubForm","MilitaryBenefitsSubForm","OtherIncomeDetailsSubForm","PensionDetailsSubForm","QuestionIncomeTypeSubForm","W2IncomeSubForm","EndSubForm","fnMutationIncomeAdd","dataMutationIncomeAdd","fnMutationIncomeUpdate","dataMutationIncomeUpdate","prevPos","HiddenHook","convertDB2FormData","data","formData","push","id","FnCreateFormData","value","visible","percentToSurvivor","nicknameIncome","owner","frequencyPayPeriod","grossWages","dateIncomeStarts","dateIncomeEnds","yearlyIncrease","incomeSourceFromAssets","notes","federalTaxationType","stateTaxationType","adjustedGrossIncome","passiveEarned","amountFederalTaxation","lessAdjustment","taxableEarnings","stateTax","payeeSurvivorBenefits","otherIncomeType","typeEmployementIncome","federalTaxes","stateTaxes","employmentRetirmentContributions","LoadDBDataHook","props","dbID","variables","loading","error","console","log","cbLoadDBData","IncomeNew","toggleRightSide","e","preventDefault","setState","isRightSideOpen","state","dbLoaded","incomeID","match","params","dataID","curSubFormID","curSubForm","formVisible","subFormData","formSteps","icon","title","isEndForm","goSubForm","bind","updateSubForm","getSubFormData","getSubFormField","createQLVariable","getSubFormFieldValue","loadDBData","formID","fieldID","index","length","fields","findex","field","subFormID","varQL","parseInt","parseFloat","bFound","instance","then","response","fromState","pformData","nextSubForm","setTimeout","navlinks","href","SubForm","formpageClassName","map","formStep","classBtn","elementPos","x","indexOf","fontSize","color","subForm","sindex","ffindex"],"sources":["/home/albatross/gitCode/shared/src/pages/modules/income/IncomeNew.js"],"sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Icon } from 'antd';\nimport ImageIcon from 'assets/images/asset.png';\nimport AssetPlanet from 'assets/images/asset-planet-logo.jpg';\n\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport {\n    QL_INCOME_ADD,\n    QL_INCOME_UPDATE,\n    QL_INCOME_GET\n} from '../../../constants/queries';\n\nimport { FormPagePose } from '../../../components/Animations';\n\nimport IncomeTypeSubForm from './subforms/IncomeTypeSubForm';\nimport IncomeDetailsSubForm from './subforms/IncomeDetailsSubForm';\nimport AnnuityDetailsSubForm from './subforms/AnnuityDetailsSubForm';\nimport IncomeTaxationSubForm from './subforms/IncomeTaxationSubForm';\nimport IndependantIncomeSubForm from './subforms/IndependantIncomeSubForm';\nimport MilitaryBenefitsSubForm from './subforms/MilitaryBenefitsSubForm';\nimport OtherIncomeDetailsSubForm from './subforms/OtherIncomeDetailsSubForm';\nimport PensionDetailsSubForm from './subforms/PensionDetailsSubForm';\nimport QuestionIncomeTypeSubForm from './subforms/QuestionIncomeTypeSubForm';\nimport W2IncomeSubForm from './subforms/W2IncomeSubForm';\nimport EndSubForm from './subforms/EndSubForm';\n\n\nvar fnMutationIncomeAdd = null;\nvar dataMutationIncomeAdd = null;\n\nvar fnMutationIncomeUpdate = null;\nvar dataMutationIncomeUpdate = null;\nlet prevPos = 0;\n\nfunction HiddenHook(){\n    [fnMutationIncomeAdd, { dataMutationIncomeAdd }] = useMutation(QL_INCOME_ADD);\n    [fnMutationIncomeUpdate, { dataMutationIncomeUpdate }] = useMutation(QL_INCOME_UPDATE);\n\n    return (\n        <React.Fragment></React.Fragment>\n    )\n}\n\nfunction convertDB2FormData(data){\n\n    let formData = [];\n\n    formData.push({\n        id: 'IncomeTypeSubForm',\n        data: IncomeTypeSubForm.FnCreateFormData({\n            value: data['income']['incomeType']\n        }),\n        visible: true\n    })\n\n    formData.push({\n        id: 'AnnuityDetailsSubForm',\n        data: AnnuityDetailsSubForm.FnCreateFormData({\n            percentToSurvivor: data['income']['percentToSurvivor']\n        }),\n        visible: true\n    })\n\n    formData.push({\n        id: 'IncomeDetailsSubForm',\n        data: IncomeDetailsSubForm.FnCreateFormData({\n            nicknameIncome: data['income']['nicknameIncome'],\n            owner: data['income']['owner'],\n            frequencyPayPeriod: data['income']['frequencyOfPayPeriods'],\n            grossWages: data['income']['grossWages'],\n            dateIncomeStarts: data['income']['dateIncomeStarts'],\n            dateIncomeEnds: data['income']['dateIncomeEnds'],\n            yearlyIncrease: data['income']['percentageYearlyIncrease'],\n            incomeSourceFromAssets: data['income']['incomeSourceFromAsset'],\n            notes: data['income']['notes']\n        }),\n        visible: true\n    })\n\n    formData.push({\n        id: 'IncomeTaxationSubForm',\n        data: IncomeTaxationSubForm.FnCreateFormData({\n            federalTaxationType: data['income']['incomeTaxation']['federalTaxationType'],\n            stateTaxationType: data['income']['incomeTaxation']['stateTaxationType'],\n            adjustedGrossIncome: data['income']['incomeTaxation']['adjustedGrossIncome'] ? 'Yes' : 'No',\n            passiveEarned: data['income']['incomeTaxation']['passiveOrEarned'],\n            amountFederalTaxation: data['income']['incomeTaxation']['amountSubjectToFederalTaxation']\n        }),\n        visible: true\n    })\n\n    formData.push({\n        id: 'IndependantIncomeSubForm',\n        data: IndependantIncomeSubForm.FnCreateFormData({\n            lessAdjustment: data['income']['independentContractor']['lessSelfEmploymentAdjustment'],\n            taxableEarnings: data['income']['independentContractor']['taxableSelfEmploymentEarnings']\n        }),\n        visible: true\n    })\n\n    formData.push({\n        id: 'MilitaryBenefitsSubForm',\n        data: MilitaryBenefitsSubForm.FnCreateFormData({\n            stateTax: data['income']['militaryBenefit']['amountSubjectToStateTax'],\n            payeeSurvivorBenefits: data['income']['militaryBenefit']['payeeOfSurvivorBenefits'],\n            percentToSurvivor: data['income']['militaryBenefit']['percentToSurvivor']\n        }),\n        visible: true\n    })\n\n    formData.push({\n        id: 'OtherIncomeDetailsSubForm',\n        data: OtherIncomeDetailsSubForm.FnCreateFormData({\n            otherIncomeType: data['income']['otherIncomeType']\n        }),\n        visible: true\n    })\n\n    formData.push({\n        id: 'PensionDetailsSubForm',\n        data: PensionDetailsSubForm.FnCreateFormData({\n            percentToSurvivor: data['income']['percentToSurvivor']\n        }),\n        visible: true\n    })\n\n    formData.push({\n        id: 'QuestionIncomeTypeSubForm',\n        data: QuestionIncomeTypeSubForm.FnCreateFormData({\n            typeEmployementIncome: ''\n        }),\n        visible: true\n    })\n\n    formData.push({\n        id: 'W2IncomeSubForm',\n        data: W2IncomeSubForm.FnCreateFormData({\n            federalTaxes: data['income']['employee']['federalTaxes'],\n            stateTaxes: data['income']['employee']['stateTaxes'],\n            employmentRetirmentContributions: data['income']['employee']['employeeRetirementContributions']\n        }),\n        visible: true\n    })\n\n    return formData;\n}\n\nfunction LoadDBDataHook(props){\n    if(props.dbID != null && props.dbID != ''){\n        const {data, loading, error} = useQuery(QL_INCOME_GET, { variables: { id: props.dbID} });\n        if(data){\n            console.log('call..');\n            props.cbLoadDBData(convertDB2FormData(data));\n        }\n    }\n    \n    return (\n        <React.Fragment></React.Fragment>\n    )\n}\n\nclass IncomeNew extends Component {\n\n    constructor(props) {\n        super(props);\n\n        let dbID = null;\n        let dbLoaded = true;      \n\n        const { incomeID } = this.props.match.params;        \n\n        if( incomeID ){\n            dbID = incomeID;\n            dbLoaded = false;\n        }\n\n        this.state = {\n            dataID: dbID,\n            curSubFormID: 'IncomeTypeSubForm',\n            curSubForm: IncomeTypeSubForm,\n            formVisible: false,\n            subFormData: {},\n            formData: [\n                // {\n                //     id: 'assetsInformation',\n                //     data: {\n                //         title: '',\n                //         fields: [\n                //             {\n                //                 id: '' ,\n                //                 title: '',\n                //                 value: ''\n                //              }   \n                //         ]\n                //     }\n                // }\n            ],\n            formSteps: [\n                {\n                    id: 'IncomeTypeSubForm',\n                    icon: 'icon_ex.png',\n                    title: 'Type of Income'\n                },\n                {\n                    id: 'IncomeDetailsSubForm',\n                    icon: 'icon_ex.png',\n                    title: 'Income Details'\n                },\n                {\n                    id: 'StepAdditionalDetails',\n                    icon: 'icon_ex.png',\n                    title: 'Additional Details'\n                },\n                {\n                    id: 'IncomeTaxationSubForm',\n                    icon: 'icon_ex.png',\n                    title: 'Taxation'\n                }\n            ],\n            dbLoaded: dbLoaded,\n            dbID: dbID,\n            isEndForm: false,\n        }\n\n        this.goSubForm = this.goSubForm.bind(this);\n        this.updateSubForm = this.updateSubForm.bind(this);\n        this.getSubFormData = this.getSubFormData.bind(this);\n        this.getSubFormField = this.getSubFormField.bind(this);\n\n        this.createQLVariable = this.createQLVariable.bind(this);\n        this.getSubFormFieldValue = this.getSubFormFieldValue.bind(this);\n\n        this.toggleRightSide = this.toggleRightSide.bind(this);\n\n        this.loadDBData = this.loadDBData.bind(this);\n    }\n\n    componentDidMount() {\n        this.goSubForm(\"IncomeTypeSubForm\");\n        // this.goSubForm(\"IncomeTaxationSubForm\");\n    }\n\n    getSubFormField(formID, fieldID){\n        let formData = this.state.formData;\n\n        for(var index = 0; index < formData.length; index++){\n            if(formData[index]['id'] == formID){\n                let data = formData[index]['data'];\n                let fields = data['fields'];\n                for(var findex = 0; findex < fields.length; findex++){\n                    if(fields[findex]['id'] == fieldID){\n                        return fields[findex];\n                    }\n                }\n            }\n        }\n\n        return null\n    }\n\n    getSubFormFieldValue(formID, fieldID){\n        let field = this.getSubFormField(formID, fieldID);\n\n        if(field == null){\n            return '';\n        }\n        else{\n            return field.value;\n        }\n    }\n\n    createQLVariable(subFormID, subFormData){\n        let varQL = null;\n\n        switch(subFormID){\n            case 'IncomeTypeSubForm': \n                varQL = {\n                    \"income\" : {\n                        \"incomeType\": this.getSubFormFieldValue(subFormID, 'incomeType')\n                    }\n                };\n                break;\n            case 'AnnuityDetailsSubForm': \n                varQL = {\n                    \"income\" : {\n                        \"percentToSurvivor\": parseInt(this.getSubFormFieldValue(subFormID, 'percentToSurvivor'))\n                    }\n                };\n                break;\n            case 'IncomeDetailsSubForm':\n                varQL = {\n                    \"income\" : {\n                        \"nicknameIncome\": this.getSubFormFieldValue(subFormID, 'nicknameIncome'),\n                        \"owner\": this.getSubFormFieldValue(subFormID, 'owner'),\n                        \"frequencyOfPayPeriods\": this.getSubFormFieldValue(subFormID, 'frequencyPayPeriod'),\n                        \"grossWages\": parseInt(this.getSubFormFieldValue(subFormID, 'grossWages')),\n                        \"dateIncomeStarts\": this.getSubFormFieldValue(subFormID, 'dateIncomeStarts'),\n                        \"dateIncomeEnds\": this.getSubFormFieldValue(subFormID, 'dateIncomeEnds'),\n                        \"percentageYearlyIncrease\": this.getSubFormFieldValue(subFormID, 'yearlyIncrease') != '' ? parseInt(this.getSubFormFieldValue(subFormID, 'yearlyIncrease')) : 0,\n                        \"incomeSourceFromAsset\": this.getSubFormFieldValue(subFormID, 'incomeSourceFromAssets'),\n                        \"notes\": this.getSubFormFieldValue(subFormID, 'notes'),\n                    }\n                };\n                break;\n            case 'IncomeTaxationSubForm':\n                varQL = {\n                    \"incomeTaxation\" : {\n                        \"federalTaxationType\": this.getSubFormFieldValue(subFormID, 'federalTaxationType'),\n                        \"stateTaxationType\": this.getSubFormFieldValue(subFormID, 'stateTaxationType'),\n                        \"adjustedGrossIncome\": this.getSubFormFieldValue(subFormID, 'adjustedGrossIncome') == 'Yes' ? true : false,\n                        \"passiveOrEarned\": this.getSubFormFieldValue(subFormID, 'passiveEarned'),\n                        \"amountSubjectToFederalTaxation\": parseInt(this.getSubFormFieldValue(subFormID, 'amountFederalTaxation'))\n                    }\n                };\n                break;\n            case 'IndependantIncomeSubForm':\n                varQL = {\n                    \"independentContractor\" : {\n                        \"lessSelfEmploymentAdjustment\": parseInt(this.getSubFormFieldValue(subFormID, 'lessAdjustment')),\n                        // \"annualSocialSecurityTax\": parseInt(this.getSubFormFieldValue(subFormID, 'stateTaxationType')),\n                        \"taxableSelfEmploymentEarnings\": parseInt(this.getSubFormFieldValue(subFormID, 'taxableEarnings')),\n                        // \"annualMedicareTax\": parseInt(this.getSubFormFieldValue(subFormID, 'passiveEarned')),\n                        // \"annualAdditionalMedicareTax\": parseInt(this.getSubFormFieldValue(subFormID, 'amountFederalTaxation')),\n                        // \"totalSelfEmploymentTax\": parseInt(this.getSubFormFieldValue(subFormID, 'amountFederalTaxation')),\n                        // \"totalDeductionPortion\": parseInt(this.getSubFormFieldValue(subFormID, 'amountFederalTaxation'))\n                    }\n                };\n                break;\n            case 'MilitaryBenefitsSubForm':\n                varQL = {\n                    \"militaryBenefit\" : {\n                        \"amountSubjectToStateTax\": this.getSubFormFieldValue(subFormID, 'stateTax') != '' ? parseFloat(this.getSubFormFieldValue(subFormID, 'stateTax')) : 0,\n                        \"payeeOfSurvivorBenefits\": this.getSubFormFieldValue(subFormID, 'payeeSurvivorBenefits') != '' ? parseFloat(this.getSubFormFieldValue(subFormID, 'payeeSurvivorBenefits')) : 0,\n                        \"percentToSurvivor\": this.getSubFormFieldValue(subFormID, 'percentToSurvivor') != '' ? parseFloat(this.getSubFormFieldValue(subFormID, 'percentToSurvivor')) : 0,\n                    },\n                    \"income\" : {\n                        \"percentToSurvivor\": this.getSubFormFieldValue(subFormID, 'percentToSurvivor') != '' ? parseInt(this.getSubFormFieldValue(subFormID, 'percentToSurvivor')) : 0\n                    }\n                };\n                break;\n            case 'OtherIncomeDetailsSubForm':\n                varQL = {\n                    \"income\" : {\n                        \"otherIncomeType\": this.getSubFormFieldValue(subFormID, 'otherIncomeType')\n                    }\n                };\n                break;\n            case 'PensionDetailsSubForm':\n                varQL = {\n                    \"income\" : {\n                        \"percentToSurvivor\": this.getSubFormFieldValue(subFormID, 'percentToSurvivor')\n                    }\n                };\n                break;\n            case 'QuestionIncomeTypeSubForm':\n                varQL = {\n                    \"earnedIncomeInformation\" : {\n                        \"typeOfEmploymentIncome\": this.getSubFormFieldValue(subFormID, 'typeEmployementIncome')\n                    }\n                };\n                break;\n            case 'W2IncomeSubForm':\n                varQL = {\n                    \"employee\" : {\n                        \"federalTaxes\": parseInt(this.getSubFormFieldValue(subFormID, 'federalTaxes')),\n                        \"stateTaxes\": parseInt(this.getSubFormFieldValue(subFormID, 'stateTaxes')),\n                        \"employeeRetirementContributions\": parseInt(this.getSubFormFieldValue(subFormID, 'employmentRetirmentContributions')),\n                        // \"totalAnnualFederalTaxes\": parseInt(this.getSubFormFieldValue(subFormID, 'typeEmployementIncome')),\n                        // \"totalAnnualStateTaxes\": parseInt(this.getSubFormFieldValue(subFormID, 'typeEmployementIncome')),\n                        // \"totalEmployeeRetirementContributions\": parseInt(this.getSubFormFieldValue(subFormID, 'typeEmployementIncome')),\n                    }\n                };\n                break;\n            case 'EndSubForm':\n                \n        }\n\n        return varQL;\n    }\n\n    updateSubForm(subFormID, subFormData, visible = true){\n        let formData = this.state.formData;\n\n        var bFound = false;\n        for(var findex = 0; findex < formData.length; findex++){\n            if(formData[findex]['id'] == subFormID){\n                formData[findex]['data'] = subFormData;\n                bFound = true;\n            }\n        }\n\n        if(!bFound){\n            formData.push({\n                id: subFormID,\n                data: subFormData,\n                visible: visible\n            })\n        }\n\n        let varQL = this.createQLVariable(subFormID, subFormData);\n\n        console.log('varQL:', varQL, ', dataID:', this.state.dataID);\n        \n        var instance = this;\n        if(varQL != null){\n            if(this.state.dataID == null){\n                fnMutationIncomeAdd({ variables: { data: varQL } }).then((response) => {\n                    instance.setState({\n                        dataID: response['data']['createIncome']['id']\n                    })\n                });\n                \n            }\n            else{\n                fnMutationIncomeUpdate({ variables: { id: this.state.dataID, data: varQL } })\n            }\n        }\n\n        this.setState({\n            formData: formData\n        });\n    }\n\n    getSubFormData(subFormID, fromState = true, pformData){\n\n        let formData;\n        if(fromState){\n            formData = this.state.formData;\n        }\n        else{\n            formData = pformData;\n        }\n        \n        for(var findex = 0; findex < formData.length; findex++){\n            if(formData[findex]['id'] == subFormID){\n                return formData[findex]['data'];\n            }\n        }\n\n        return {};\n    }\n\n    goSubForm(subFormID){\n\n        this.setState({\n            formVisible: false,\n        })\n\n        let nextSubForm = IncomeTypeSubForm;\n        let subFormData = this.getSubFormData(subFormID);\n\n        switch(subFormID){\n            case 'IncomeTypeSubForm':\n                nextSubForm = IncomeTypeSubForm;\n                this.setState({isEndForm: false, formData: []})\n                break;\n            case 'AnnuityDetailsSubForm': \n                nextSubForm = AnnuityDetailsSubForm;\n                break;\n            case 'IncomeDetailsSubForm': \n                nextSubForm = IncomeDetailsSubForm;\n                break;\n            case 'IncomeTaxationSubForm': \n                nextSubForm = IncomeTaxationSubForm;\n                break;\n            case 'IndependantIncomeSubForm': \n                nextSubForm = IndependantIncomeSubForm;\n                break;\n            case 'MilitaryBenefitsSubForm': \n                nextSubForm = MilitaryBenefitsSubForm;\n                break;\n            case 'OtherIncomeDetailsSubForm': \n                nextSubForm = OtherIncomeDetailsSubForm;\n                break;\n            case 'PensionDetailsSubForm': \n                nextSubForm = PensionDetailsSubForm;\n                break;\n            case 'QuestionIncomeTypeSubForm': \n                nextSubForm = QuestionIncomeTypeSubForm;\n                break;\n            case 'W2IncomeSubForm': \n                nextSubForm = W2IncomeSubForm;\n                break;\n            case 'EndSubForm':\n                nextSubForm = EndSubForm;\n                this.setState({isEndForm: true})\n                break;\n            case 'StepAdditionalDetails':\n                switch(this.getSubFormFieldValue('IncomeTypeSubForm', 'incomeType')){\n                    case \"Military Benefits\":\n                        nextSubForm = MilitaryBenefitsSubForm;    \n                        break;\n                    case \"Pension\":\n                        nextSubForm = PensionDetailsSubForm;\n                        break;\n                    case \"Annuity\":\n                        nextSubForm = AnnuityDetailsSubForm;    \n                        break;\n                    case \"Other\":\n                        nextSubForm = OtherIncomeDetailsSubForm;    \n                        break;\n                    case \"Bonus from Work\":\n                    case \"Earned Income From Work\":\n                    case \"Sales Commision from Work\":\n                        nextSubForm = QuestionIncomeTypeSubForm;    \n                        break;\n                    default:\n                        nextSubForm = IncomeTaxationSubForm;    \n                        break;\n        \n                }\n                break;\n        }\n\n        setTimeout(() => {\n            this.setState({ \n                formVisible: true,\n                curSubFormID: subFormID,\n                curSubForm: nextSubForm,\n                subFormData: subFormData\n            });\n        }, 100);\n\n    }\n\n    toggleRightSide = (e) => {\n        e.preventDefault();\n        this.setState({ isRightSideOpen: !this.state.isRightSideOpen });\n    }\n\n    loadDBData(formData){\n        console.log('formData:', formData);\n\n        var instance = this;\n        setTimeout(function(){\n            instance.setState({ \n                formVisible: true,\n                dbLoaded: true,\n                formData: formData,\n                subFormData: instance.getSubFormData(instance.state.curSubFormID, false, formData)\n            });\n        }, 100)        \n\n    }\n\n    render() {\n\n        const navlinks = [\n            {\n                href: '/',\n                title: 'Home'\n            },\n            {\n                href: '/modules',\n                title: 'Modules'\n            },\n            {\n                href: '/income',\n                title: 'Income'\n            }\n        ]\n\n        let SubForm = this.state.curSubForm;\n\n        let formpageClassName = 'form-page-container-wrap';\n        if(this.state.isRightSideOpen){\n            formpageClassName = 'form-page-container-wrap right-side--opend';\n        }\n        else {\n            formpageClassName = 'form-page-container-wrap right-side--collapsed';\n        }\n        return (\n            <div className={formpageClassName}>\n                <div className=\"form-page--main-side\">\n                    <div className=\"steps\">\n                        <div className=\"logo-container align-items-top justify-content-center\">\n                            <img className=\"img-asset\" src={AssetPlanet} />\n                        </div>\n                        <div className=\"process\">\n                            <div className=\"process-row\">\n                                {\n                                    this.state.formSteps.map((formStep, index) => {\n                                        let classBtn = 'btn nav-items btn-circle'\n                                        let elementPos = this.state.formSteps.map(function(x) {return x.id; }).indexOf(this.state.curSubFormID);\n\n                                        if (elementPos === -1) {\n                                            elementPos = prevPos+1;\n                                        } else {\n                                            prevPos = elementPos;\n                                        }\n                                        classBtn = elementPos >= index ? 'btn nav-items btn-circle active' : 'btn nav-items btn-circle'\n\n                                        if((this.state.isEndForm && index > 0) || (elementPos === 0 && index > 0)) \n                                            classBtn = 'btn nav-items btn-circle disabled'\n                                    \n                                        return (\n                                            <div className=\"process-step\" key={index}>\n                                                <button type=\"button\" className={ classBtn } data-toggle=\"tab\" onClick={() => {\n                                                    if(classBtn !== 'btn nav-items btn-circle disabled')\n                                                    this.goSubForm(formStep.id)\n                                                } }>\n                                                    {/* <img className=\"img-icon\" src={ImageIcon} /> */}\n                                                    <div style={{ fontSize: 30, color: '#006400' }}>\n                                                        {index + 1}\n                                                    </div>\n                                                </button>\n                                                <p className=\"step-title\">{formStep.title}</p>\n                                            </div>\n                                        )\n                                    })\n                                }\n                            </div>\n                        </div>\n                    </div>\n                    <HiddenHook />\n                    {\n                        !this.state.dbLoaded && \n                        <LoadDBDataHook \n                            dbLoaded={this.state.dbLoaded}\n                            dbID={this.state.dbID}\n                            cbLoadDBData={this.loadDBData}\n                        />\n                    }\n                    <div className=\"container\">\n                        <div className=\"page-nav-history\">\n                            {/* { \n                                navlinks.map((navlink, index) => {\n                                    return (\n                                        <span key={index}>\n                                            <Link key={index} to={navlink.href} className=\"page-nav-link\">\n                                                {navlink.title}\n                                            </Link>\n                                            {index != (navlinks.length - 1) ? \"/\" : null}\n                                        </span>\n                                        \n                                    )                            \n                                }) \n                            } */}\n                        </div>\n                        {\n                            !this.state.dbLoaded && <div>Loading...</div>\n                        }\n                        {\n                            this.state.dbLoaded && \n                            <div className=\"form-page-container\">\n                                <div className=\"form-page--left-side\">\n                                    <FormPagePose className=\"info-form-block\" pose={this.state.formVisible ? 'visible' : 'hidden'}>\n                                        <SubForm \n                                            subFormData={this.state.subFormData}\n                                            cbGoSubForm={this.goSubForm}\n                                            cbUpdateSubForm={this.updateSubForm}\n                                            formData={this.state.formData}\n                                            cbGetSubFormField={this.getSubFormField}\n                                        />\n                                    </FormPagePose>\n                                </div>\n                            </div>\n                        }\n                    </div>\n                </div>\n                <div className=\"form-page--right-side\">\n                    <span className=\"right-side-collapse-icon\" onClick={this.toggleRightSide}>\n                        <i className=\"fe-menu\"></i>\n                    </span>\n                    <div className=\"form-page--right-side-wrap\">\n                        {\n                            this.state.formData.map((subForm, sindex) => {\n                                if(subForm.visible == false){\n                                    return (<div key={sindex}></div>)\n                                }\n                                \n                                let subFormData = subForm.data;\n                                return(\n                                <div className=\"form-brief-block\" key={sindex}>\n                                    <div className=\"form-brief-top\">\n                                        <h4 className=\"form-brief-title\">{subFormData.title}</h4>\n                                        <span className=\"form-brief-edit-btn\" onClick={() => this.goSubForm(subForm.id)}><Icon type=\"edit\"></Icon></span>\n                                    </div>\n                                    <div className=\"form-brief-content\">\n                                    {\n                                        subFormData.fields.map((field, ffindex) => {\n                                            return(\n                                                <div className=\"form-brief-item\" key={ffindex}>\n                                                    <p className=\"form-brief-item-title\">{field.title != '' ? field.title + \":\" : null} </p>\n                                                    <p className=\"form-brief-item-value\">{field.value}</p>\n                                                </div>\n                                            )\n                                        })\n                                    }\n                                    </div>\n                                </div>\n                                )\n                            })\n                        }\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default connect()(IncomeNew);"],"mappings":"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"},"metadata":{},"sourceType":"module"}