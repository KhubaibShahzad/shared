{"ast":null,"code":"import _objectSpread from \"/home/albatross/gitCode/shared/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { PLAID_LOGIN } from '../../constants/actionTypes';\nvar plaid_connected = window.localStorage.getItem('plaid_connected');\nif (plaid_connected == null) {\n  plaid_connected = false;\n}\nvar plaid_public_token = window.localStorage.getItem('plaid_public_token');\nif (plaid_public_token == null) {\n  plaid_public_token = '';\n}\nvar INIT_STATE = {\n  plaid_connected: plaid_connected,\n  plaid_public_token: plaid_public_token\n};\nvar User = function User() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INIT_STATE;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case PLAID_LOGIN:\n      return _objectSpread({}, state, {\n        plaid_connected: action.payload.plaid_connected,\n        plaid_public_token: action.payload.plaid_public_token\n      });\n    default:\n      return _objectSpread({}, state);\n  }\n};\nexport default User;","map":{"version":3,"names":["PLAID_LOGIN","plaid_connected","window","localStorage","getItem","plaid_public_token","INIT_STATE","User","state","action","type","payload"],"sources":["/home/albatross/gitCode/shared/src/redux/user/reducers.js"],"sourcesContent":["// @flow\nimport {\n    PLAID_LOGIN,\n} from '../../constants/actionTypes';\n\nlet plaid_connected = window.localStorage.getItem('plaid_connected');\nif(plaid_connected == null){\n    plaid_connected = false;\n}\n\nlet plaid_public_token = window.localStorage.getItem('plaid_public_token');\nif(plaid_public_token == null){\n    plaid_public_token = '';\n}\n\nconst INIT_STATE = {\n    plaid_connected: plaid_connected,\n    plaid_public_token: plaid_public_token\n};\n\ntype UserAction = { type: string, payload: {} | string };\ntype State = { plaid_connected?: boolean, plaid_public_token?: string };\n\nconst User = (state:State = INIT_STATE, action: UserAction) => {\n    switch (action.type) {\n        case PLAID_LOGIN:\n            return { ...state, plaid_connected: action.payload.plaid_connected, plaid_public_token: action.payload.plaid_public_token };\n        default: return { ...state };\n    }\n}\n\nexport default User;"],"mappings":";AACA,SACIA,WAAW,QACR,6BAA6B;AAEpC,IAAIC,eAAe,GAAGC,MAAM,CAACC,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC;AACpE,IAAGH,eAAe,IAAI,IAAI,EAAC;EACvBA,eAAe,GAAG,KAAK;AAC3B;AAEA,IAAII,kBAAkB,GAAGH,MAAM,CAACC,YAAY,CAACC,OAAO,CAAC,oBAAoB,CAAC;AAC1E,IAAGC,kBAAkB,IAAI,IAAI,EAAC;EAC1BA,kBAAkB,GAAG,EAAE;AAC3B;AAEA,IAAMC,UAAU,GAAG;EACfL,eAAe,EAAEA,eAAe;EAChCI,kBAAkB,EAAEA;AACxB,CAAC;AAKD,IAAME,IAAI,GAAG,SAAPA,IAAI,GAAqD;EAAA,IAAjDC,KAAW,uEAAGF,UAAU;EAAA,IAAEG,MAAkB;EACtD,QAAQA,MAAM,CAACC,IAAI;IACf,KAAKV,WAAW;MACZ,yBAAYQ,KAAK;QAAEP,eAAe,EAAEQ,MAAM,CAACE,OAAO,CAACV,eAAe;QAAEI,kBAAkB,EAAEI,MAAM,CAACE,OAAO,CAACN;MAAkB;IAC7H;MAAS,yBAAYG,KAAK;EAAG;AAErC,CAAC;AAED,eAAeD,IAAI"},"metadata":{},"sourceType":"module"}