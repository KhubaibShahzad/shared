{"ast":null,"code":"import _asyncToGenerator from \"/home/albatross/gitCode/shared/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nimport { createSlice } from \"@reduxjs/toolkit\";\nvar initialState = {\n  inventories: [],\n  collection: null,\n  selectedModuleName: \"\"\n};\n\n// A slice for inventory with our 2 reducers\nvar inventorySlice = createSlice({\n  name: \"inventory\",\n  initialState: initialState,\n  reducers: {\n    setInventories: function setInventories(state, _ref) {\n      var payload = _ref.payload;\n      state.inventories = payload;\n    },\n    setCollection: function setCollection(state, _ref2) {\n      var payload = _ref2.payload;\n      state.collection = payload;\n    },\n    setSelectedModuleName: function setSelectedModuleName(state, _ref3) {\n      var payload = _ref3.payload;\n      state.selectedModuleName = payload;\n    }\n  }\n});\n\n// Two actions generated from the slice\nvar _inventorySlice$actio = inventorySlice.actions,\n  setInventories = _inventorySlice$actio.setInventories,\n  setCollection = _inventorySlice$actio.setCollection,\n  setSelectedModuleName = _inventorySlice$actio.setSelectedModuleName; // The reducer\nexport { setInventories, setCollection, setSelectedModuleName };\nexport default inventorySlice.reducer;\n\n// Asynchronous thunk action\nexport function postSetInventories(inventories) {\n  return /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(dispatch) {\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            dispatch(setInventories(inventories));\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return function (_x) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n}\n\n// Asynchronous thunk action\nexport function postSetCollection(collection) {\n  return /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(dispatch) {\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            dispatch(setCollection(collection));\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n    return function (_x2) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n}\n\n// Asynchronous thunk action\nexport function postSetSelectedModuleName(moduleName) {\n  return /*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(dispatch) {\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            dispatch(setSelectedModuleName(moduleName));\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3);\n    }));\n    return function (_x3) {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n}","map":{"version":3,"names":["createSlice","initialState","inventories","collection","selectedModuleName","inventorySlice","name","reducers","setInventories","state","payload","setCollection","setSelectedModuleName","actions","reducer","postSetInventories","dispatch","postSetCollection","postSetSelectedModuleName","moduleName"],"sources":["/home/albatross/gitCode/shared/src/redux/slices/inventorySlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  inventories: [],\n  collection: null,\n  selectedModuleName: \"\",\n};\n\n// A slice for inventory with our 2 reducers\nconst inventorySlice = createSlice({\n  name: \"inventory\",\n  initialState,\n  reducers: {\n    setInventories: (state, { payload }) => {\n      state.inventories = payload;\n    },\n    setCollection: (state, { payload }) => {\n      state.collection = payload;\n    },\n    setSelectedModuleName: (state, { payload }) => {\n      state.selectedModuleName = payload;\n    },\n  },\n});\n\n// Two actions generated from the slice\nexport const { setInventories, setCollection, setSelectedModuleName} = inventorySlice.actions;\n\n// The reducer\nexport default inventorySlice.reducer;\n\n// Asynchronous thunk action\nexport function postSetInventories(inventories) {\n  return async (dispatch) => {\n    dispatch(setInventories(inventories));\n  };\n}\n\n// Asynchronous thunk action\nexport function postSetCollection(collection) {\n  return async (dispatch) => {\n    dispatch(setCollection(collection));\n  };\n}\n\n// Asynchronous thunk action\nexport function postSetSelectedModuleName(moduleName) {\n  return async (dispatch) => {\n    dispatch(setSelectedModuleName(moduleName));\n  };\n}\n"],"mappings":";+CACA;AADA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,IAAMC,YAAY,GAAG;EACnBC,WAAW,EAAE,EAAE;EACfC,UAAU,EAAE,IAAI;EAChBC,kBAAkB,EAAE;AACtB,CAAC;;AAED;AACA,IAAMC,cAAc,GAAGL,WAAW,CAAC;EACjCM,IAAI,EAAE,WAAW;EACjBL,YAAY,EAAZA,YAAY;EACZM,QAAQ,EAAE;IACRC,cAAc,EAAE,wBAACC,KAAK,QAAkB;MAAA,IAAdC,OAAO,QAAPA,OAAO;MAC/BD,KAAK,CAACP,WAAW,GAAGQ,OAAO;IAC7B,CAAC;IACDC,aAAa,EAAE,uBAACF,KAAK,SAAkB;MAAA,IAAdC,OAAO,SAAPA,OAAO;MAC9BD,KAAK,CAACN,UAAU,GAAGO,OAAO;IAC5B,CAAC;IACDE,qBAAqB,EAAE,+BAACH,KAAK,SAAkB;MAAA,IAAdC,OAAO,SAAPA,OAAO;MACtCD,KAAK,CAACL,kBAAkB,GAAGM,OAAO;IACpC;EACF;AACF,CAAC,CAAC;;AAEF;AAAA,4BACuEL,cAAc,CAACQ,OAAO;EAA9EL,cAAc,yBAAdA,cAAc;EAAEG,aAAa,yBAAbA,aAAa;EAAEC,qBAAqB,yBAArBA,qBAAqB,EAEnE;AAAA;AACA,eAAeP,cAAc,CAACS,OAAO;;AAErC;AACA,OAAO,SAASC,kBAAkB,CAACb,WAAW,EAAE;EAC9C;IAAA,uEAAO,iBAAOc,QAAQ;MAAA;QAAA;UAAA;YACpBA,QAAQ,CAACR,cAAc,CAACN,WAAW,CAAC,CAAC;UAAC;UAAA;YAAA;QAAA;MAAA;IAAA,CACvC;IAAA;MAAA;IAAA;EAAA;AACH;;AAEA;AACA,OAAO,SAASe,iBAAiB,CAACd,UAAU,EAAE;EAC5C;IAAA,uEAAO,kBAAOa,QAAQ;MAAA;QAAA;UAAA;YACpBA,QAAQ,CAACL,aAAa,CAACR,UAAU,CAAC,CAAC;UAAC;UAAA;YAAA;QAAA;MAAA;IAAA,CACrC;IAAA;MAAA;IAAA;EAAA;AACH;;AAEA;AACA,OAAO,SAASe,yBAAyB,CAACC,UAAU,EAAE;EACpD;IAAA,uEAAO,kBAAOH,QAAQ;MAAA;QAAA;UAAA;YACpBA,QAAQ,CAACJ,qBAAqB,CAACO,UAAU,CAAC,CAAC;UAAC;UAAA;YAAA;QAAA;MAAA;IAAA,CAC7C;IAAA;MAAA;IAAA;EAAA;AACH"},"metadata":{},"sourceType":"module"}