{"ast":null,"code":"import _classCallCheck from \"/home/albatross/gitCode/shared/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/albatross/gitCode/shared/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/albatross/gitCode/shared/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/albatross/gitCode/shared/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/albatross/gitCode/shared/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/albatross/gitCode/shared/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/albatross/gitCode/shared/src/pages/client_info/clients_plans/subforms/ProfessionalContactsSubForm.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n// import { Table, Button, Card, Row, Col } from 'reactstrap';\n\nimport { Form, Table, Divider, Tag, Button, Row, Col, Input, DatePicker, Select, Radio } from 'antd';\nimport SubFormTable from '../../../../components/SubFormTable';\nimport Currency from '../../../../components/form/Currency';\nimport moment from 'moment';\nvar dateFormat = 'MM/DD/YYYY';\nvar professions = ['Bookkeeper', 'CPA', 'Financial Advisor', 'Insurance Agent', 'Lawyer - Corporate', 'Lawyer - Divorce', 'Lawyer - Estate', 'Tax Professional'];\nvar formChanged = false;\nvar formData = [];\nvar formID = \"ProfessionalContactsSubForm\";\nvar ProfessionalContactsSubForm = /*#__PURE__*/function (_Component) {\n  _inherits(ProfessionalContactsSubForm, _Component);\n  function ProfessionalContactsSubForm(props) {\n    var _this;\n    _classCallCheck(this, ProfessionalContactsSubForm);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ProfessionalContactsSubForm).call(this, props));\n    _this.state = {\n      enableNext: true,\n      formData: {},\n      rows: []\n    };\n    _this.goNextForm = _this.goNextForm.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.formChange = _this.formChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.updateFormData = _this.updateFormData.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n  _createClass(ProfessionalContactsSubForm, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.updateFormData(this.props.subFormData);\n    }\n  }, {\n    key: \"updateFormData\",\n    value: function updateFormData(newFormData) {\n      console.log('updateformdata:', newFormData);\n      if (newFormData.hasOwnProperty('data')) {\n        var newRows = [];\n        for (var index = 0; index < newFormData['data'].length; index++) {\n          newRows.push({\n            key: newFormData['data'][index]['id'],\n            uuid: newFormData['data'][index]['id'],\n            id: newFormData['data'][index]['id'],\n            firstName: newFormData['data'][index]['firstName'],\n            lastName: newFormData['data'][index]['lastName'],\n            company: newFormData['data'][index]['company'],\n            emailAddress: newFormData['data'][index]['emailAddress'],\n            officeContactNumber: newFormData['data'][index]['officeContactNumber'],\n            mobileContactNumber: newFormData['data'][index]['mobileContactNumber'],\n            profession: newFormData['data'][index]['profession']\n          });\n        }\n        this.setState({\n          rows: newRows\n        });\n      }\n    }\n  }, {\n    key: \"goNextForm\",\n    value: function goNextForm() {\n      if (!this.state.enableNext) {\n        return;\n      }\n      if (formChanged) {\n        var newFormData = [];\n        for (var index = 0; index < formData.length; index++) {\n          newFormData.push({\n            firstName: formData[index]['firstName'],\n            lastName: formData[index]['lastName'],\n            company: formData[index]['company'],\n            emailAddress: formData[index]['emailAddress'],\n            officeContactNumber: formData[index]['officeContactNumber'],\n            mobileContactNumber: formData[index]['mobileContactNumber'],\n            profession: formData[index]['profession']\n          });\n        }\n        this.props.cbUpdateSubForm(formID, newFormData, false);\n      }\n      this.props.cbGoSubForm(\"EndSubForm\");\n    }\n  }, {\n    key: \"formChange\",\n    value: function formChange(rows) {\n      formChanged = true;\n      formData = rows;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var colsFormat = [{\n        title: 'Name',\n        dataIndex: 'name',\n        key: 'name',\n        fields: [{\n          type: 'Input',\n          name: 'firstName',\n          placeholder: 'First Name'\n        }, {\n          type: 'Input',\n          name: 'lastName',\n          placeholder: 'Last Name'\n        }]\n      }, {\n        title: 'Company Name',\n        dataIndex: 'company',\n        key: 'company',\n        fields: [{\n          type: 'Input',\n          name: 'company'\n        }]\n      }, {\n        title: 'Email',\n        dataIndex: 'emailAddress',\n        key: 'emailAddress',\n        fields: [{\n          type: 'Email',\n          name: 'emailAddress'\n        }]\n      }, {\n        title: 'Phone Number - Office',\n        dataIndex: 'officeContactNumber',\n        key: 'officeContactNumber',\n        fields: [{\n          type: 'PhoneNumber',\n          name: 'officeContactNumber'\n        }]\n      }, {\n        title: 'Phone Number - Mobile',\n        dataIndex: 'mobileContactNumber',\n        key: 'mobileContactNumber',\n        fields: [{\n          type: 'PhoneNumber',\n          name: 'mobileContactNumber'\n        }]\n      }, {\n        title: 'Profession',\n        dataIndex: 'profession',\n        key: 'profession',\n        fields: [{\n          type: 'Select',\n          name: 'profession',\n          placeholder: '-Select-',\n          values: professions\n        }]\n      }];\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(SubFormTable, {\n        title: \"Professional Contacts\",\n        rows: this.state.rows,\n        colsFormat: colsFormat,\n        addNewButton: true,\n        cbFormChange: this.formChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        type: \"primary\",\n        onClick: function onClick() {\n          return _this2.goNextForm();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 21\n        }\n      }, \"Next\")));\n    }\n  }]);\n  return ProfessionalContactsSubForm;\n}(Component);\nexport default connect()(ProfessionalContactsSubForm);","map":{"version":3,"names":["React","Component","connect","Form","Table","Divider","Tag","Button","Row","Col","Input","DatePicker","Select","Radio","SubFormTable","Currency","moment","dateFormat","professions","formChanged","formData","formID","ProfessionalContactsSubForm","props","state","enableNext","rows","goNextForm","bind","formChange","updateFormData","subFormData","newFormData","console","log","hasOwnProperty","newRows","index","length","push","key","uuid","id","firstName","lastName","company","emailAddress","officeContactNumber","mobileContactNumber","profession","setState","cbUpdateSubForm","cbGoSubForm","colsFormat","title","dataIndex","fields","type","name","placeholder","values"],"sources":["/home/albatross/gitCode/shared/src/pages/client_info/clients_plans/subforms/ProfessionalContactsSubForm.js"],"sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n// import { Table, Button, Card, Row, Col } from 'reactstrap';\n\nimport { Form, Table, Divider, Tag, Button, Row, Col, Input, DatePicker, Select, Radio } from 'antd';\n\nimport SubFormTable from '../../../../components/SubFormTable';\nimport Currency from '../../../../components/form/Currency';\nimport moment from 'moment';\n\nconst dateFormat = 'MM/DD/YYYY';\n\nconst professions = [\n    'Bookkeeper', 'CPA', 'Financial Advisor', 'Insurance Agent', 'Lawyer - Corporate', 'Lawyer - Divorce', 'Lawyer - Estate', 'Tax Professional'\n]\n\nvar formChanged = false;\nvar formData = [];\n\nconst formID = \"ProfessionalContactsSubForm\";\nclass ProfessionalContactsSubForm extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            enableNext: true,\n            formData: {\n                \n            },\n            rows:[]\n        }\n\n        this.goNextForm = this.goNextForm.bind(this);\n        this.formChange = this.formChange.bind(this);\n\n        this.updateFormData = this.updateFormData.bind(this);\n\n    }\n\n    componentDidMount() {\n        this.updateFormData(this.props.subFormData);\n    }\n\n    updateFormData(newFormData){\n        console.log('updateformdata:', newFormData);\n        if(newFormData.hasOwnProperty('data')){\n            let newRows = [];\n            for(var index = 0; index < newFormData['data'].length; index++){\n                newRows.push({\n                    key: newFormData['data'][index]['id'],\n                    uuid: newFormData['data'][index]['id'],\n                    id: newFormData['data'][index]['id'],\n                    firstName: newFormData['data'][index]['firstName'],\n                    lastName: newFormData['data'][index]['lastName'],\n                    company: newFormData['data'][index]['company'],\n                    emailAddress: newFormData['data'][index]['emailAddress'],\n                    officeContactNumber: newFormData['data'][index]['officeContactNumber'],\n                    mobileContactNumber: newFormData['data'][index]['mobileContactNumber'],\n                    profession: newFormData['data'][index]['profession'],\n                })\n            }\n\n            this.setState({\n                rows: newRows\n            })\n        }\n    }\n\n    goNextForm(){\n        if(!this.state.enableNext){\n            return;\n        }\n\n        if(formChanged){\n            let newFormData = [];\n            for(var index = 0; index < formData.length; index++){\n                newFormData.push({\n                    firstName: formData[index]['firstName'],\n                    lastName: formData[index]['lastName'],\n                    company: formData[index]['company'],\n                    emailAddress: formData[index]['emailAddress'],\n                    officeContactNumber: formData[index]['officeContactNumber'],\n                    mobileContactNumber: formData[index]['mobileContactNumber'],\n                    profession: formData[index]['profession']\n                })\n            }\n            this.props.cbUpdateSubForm(formID, newFormData, false);\n        }     \n\n        this.props.cbGoSubForm(\"EndSubForm\");\n               \n    }\n\n    formChange(rows){\n        formChanged = true;\n        formData = rows;\n    }\n\n    render() {\n        \n        const colsFormat = [\n            {\n                title: 'Name',\n                dataIndex: 'name',\n                key: 'name',\n                fields: [\n                    {\n                        type: 'Input',\n                        name: 'firstName',\n                        placeholder: 'First Name'\n                    },\n                    {\n                        type: 'Input',\n                        name: 'lastName',\n                        placeholder: 'Last Name'\n                    }\n                ]\n            },\n            {\n                title: 'Company Name',\n                dataIndex: 'company',\n                key: 'company',\n                fields: [\n                    {\n                        type: 'Input',\n                        name: 'company'\n                    }\n                ]\n            },\n            {\n                title: 'Email',\n                dataIndex: 'emailAddress',\n                key: 'emailAddress',\n                fields: [\n                    {\n                        type: 'Email',\n                        name: 'emailAddress'\n                    }\n                ]\n            },\n            {\n                title: 'Phone Number - Office',\n                dataIndex: 'officeContactNumber',\n                key: 'officeContactNumber',\n                fields: [\n                    {\n                        type: 'PhoneNumber',\n                        name: 'officeContactNumber'\n                    }\n                ]\n            },\n            {\n                title: 'Phone Number - Mobile',\n                dataIndex: 'mobileContactNumber',\n                key: 'mobileContactNumber',\n                fields: [\n                    {\n                        type: 'PhoneNumber',\n                        name: 'mobileContactNumber'\n                    }\n                ]\n            },\n            {\n                title: 'Profession',\n                dataIndex: 'profession',\n                key: 'profession',\n                fields: [\n                    {\n                        type: 'Select',\n                        name: 'profession',\n                        placeholder: '-Select-',\n                        values: professions\n                    }\n                ]\n            },\n        ];\n\n        return (\n            <React.Fragment>\n                <SubFormTable \n                    title=\"Professional Contacts\" \n                    rows={this.state.rows} \n                    colsFormat={colsFormat}\n                    addNewButton={true}\n                    cbFormChange={this.formChange}\n                >\n                </SubFormTable>\n                <div>\n                    <Button type=\"primary\" onClick={() => this.goNextForm()}>Next</Button>\n                </div>\n            </React.Fragment>\n        )\n    }\n}\n\n\nexport default connect()(ProfessionalContactsSubForm);"],"mappings":"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"},"metadata":{},"sourceType":"module"}