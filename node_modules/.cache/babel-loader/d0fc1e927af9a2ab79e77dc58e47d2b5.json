{"ast":null,"code":"var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nvar Base64 = {\n  btoa: function btoa() {\n    var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var str = input;\n    var output = '';\n    for (var block = 0, charCode, i = 0, map = chars; str.charAt(i | 0) || (map = '=', i % 1); output += map.charAt(63 & block >> 8 - i % 1 * 8)) {\n      charCode = str.charCodeAt(i += 3 / 4);\n      if (charCode > 0xFF) {\n        throw new Error(\"'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.\");\n      }\n      block = block << 8 | charCode;\n    }\n    return output;\n  },\n  atob: function atob() {\n    var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    console.log('input', input);\n    var str = input.replace(/=+$/, '');\n    var output = '';\n    if (str.length % 4 == 1) {\n      throw new Error(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n    }\n    for (var bc = 0, bs = 0, buffer, i = 0; buffer = str.charAt(i++); ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer, bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {\n      buffer = chars.indexOf(buffer);\n    }\n    return output;\n  }\n};\nexport default Base64;","map":{"version":3,"names":["chars","Base64","btoa","input","str","output","block","charCode","i","map","charAt","charCodeAt","Error","atob","console","log","replace","length","bc","bs","buffer","String","fromCharCode","indexOf"],"sources":["/home/albatross/gitCode/shared/src/utils/base64.js"],"sourcesContent":["const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst Base64 = {\n    btoa: (input:string = '')  => {\n      let str = input;\n      let output = '';\n  \n      for (let block = 0, charCode, i = 0, map = chars;\n      str.charAt(i | 0) || (map = '=', i % 1);\n      output += map.charAt(63 & block >> 8 - i % 1 * 8)) {\n  \n        charCode = str.charCodeAt(i += 3/4);\n  \n        if (charCode > 0xFF) {\n          throw new Error(\"'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.\");\n        }\n        \n        block = block << 8 | charCode;\n      }\n      \n      return output;\n    },\n  \n    atob: (input:string = '') => {\n      console.log('input',input);\n      let str = input.replace(/=+$/, '');\n      let output = '';\n  \n      if (str.length % 4 == 1) {\n        throw new Error(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n      }\n      for (let bc = 0, bs = 0, buffer, i = 0;\n        buffer = str.charAt(i++);\n  \n        ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,\n          bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0\n      ) {\n        buffer = chars.indexOf(buffer);\n      }\n  \n      return output;\n    }\n  };\n\n  export default Base64"],"mappings":"AAAA,IAAMA,KAAK,GAAG,mEAAmE;AACjF,IAAMC,MAAM,GAAG;EACXC,IAAI,EAAE,gBAAwB;IAAA,IAAvBC,KAAY,uEAAG,EAAE;IACtB,IAAIC,GAAG,GAAGD,KAAK;IACf,IAAIE,MAAM,GAAG,EAAE;IAEf,KAAK,IAAIC,KAAK,GAAG,CAAC,EAAEC,QAAQ,EAAEC,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGT,KAAK,EAChDI,GAAG,CAACM,MAAM,CAACF,CAAC,GAAG,CAAC,CAAC,KAAKC,GAAG,GAAG,GAAG,EAAED,CAAC,GAAG,CAAC,CAAC,EACvCH,MAAM,IAAII,GAAG,CAACC,MAAM,CAAC,EAAE,GAAGJ,KAAK,IAAI,CAAC,GAAGE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE;MAEjDD,QAAQ,GAAGH,GAAG,CAACO,UAAU,CAACH,CAAC,IAAI,CAAC,GAAC,CAAC,CAAC;MAEnC,IAAID,QAAQ,GAAG,IAAI,EAAE;QACnB,MAAM,IAAIK,KAAK,CAAC,0FAA0F,CAAC;MAC7G;MAEAN,KAAK,GAAGA,KAAK,IAAI,CAAC,GAAGC,QAAQ;IAC/B;IAEA,OAAOF,MAAM;EACf,CAAC;EAEDQ,IAAI,EAAE,gBAAuB;IAAA,IAAtBV,KAAY,uEAAG,EAAE;IACtBW,OAAO,CAACC,GAAG,CAAC,OAAO,EAACZ,KAAK,CAAC;IAC1B,IAAIC,GAAG,GAAGD,KAAK,CAACa,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;IAClC,IAAIX,MAAM,GAAG,EAAE;IAEf,IAAID,GAAG,CAACa,MAAM,GAAG,CAAC,IAAI,CAAC,EAAE;MACvB,MAAM,IAAIL,KAAK,CAAC,mEAAmE,CAAC;IACtF;IACA,KAAK,IAAIM,EAAE,GAAG,CAAC,EAAEC,EAAE,GAAG,CAAC,EAAEC,MAAM,EAAEZ,CAAC,GAAG,CAAC,EACpCY,MAAM,GAAGhB,GAAG,CAACM,MAAM,CAACF,CAAC,EAAE,CAAC,EAExB,CAACY,MAAM,KAAKD,EAAE,GAAGD,EAAE,GAAG,CAAC,GAAGC,EAAE,GAAG,EAAE,GAAGC,MAAM,GAAGA,MAAM,EACjDF,EAAE,EAAE,GAAG,CAAC,CAAC,GAAGb,MAAM,IAAIgB,MAAM,CAACC,YAAY,CAAC,GAAG,GAAGH,EAAE,KAAK,CAAC,CAAC,GAAGD,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAC1E;MACAE,MAAM,GAAGpB,KAAK,CAACuB,OAAO,CAACH,MAAM,CAAC;IAChC;IAEA,OAAOf,MAAM;EACf;AACF,CAAC;AAED,eAAeJ,MAAM"},"metadata":{},"sourceType":"module"}